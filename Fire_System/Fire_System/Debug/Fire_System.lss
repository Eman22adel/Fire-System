
Fire_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00003e1e  00003eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080012e  0080012e  00003f80  2**0
                  ALLOC
  3 .stab         00004e60  00000000  00000000  00003f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000218e  00000000  00000000  00008de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000af6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b21e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ce67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000eb00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ec60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eeed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 34       	cpi	r26, 0x4F	; 79
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <main>
      8a:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
#include "avr/io.h"
#include "UART.h"


void UART_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* set baud rate 9600*/
	UBRRL=51;
     b4e:	e9 e2       	ldi	r30, 0x29	; 41
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	83 e3       	ldi	r24, 0x33	; 51
     b54:	80 83       	st	Z, r24
	/* NORMAL SPEED*/
	CLR_BIT(UCSRA,U2X);
     b56:	ab e2       	ldi	r26, 0x2B	; 43
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8c 93       	st	X, r24
	/*frame  no parity 1 stop bit  8 data*/

	/* enable*/
	SET_BIT(UCSRB,TXEN);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	88 60       	ori	r24, 0x08	; 8
     b70:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     b72:	aa e2       	ldi	r26, 0x2A	; 42
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ea e2       	ldi	r30, 0x2A	; 42
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 61       	ori	r24, 0x10	; 16
     b7e:	8c 93       	st	X, r24
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <UART_Send>:


void UART_Send(u8 data)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	while(!READ_BIT(UCSRA,UDRE));
     b92:	eb e2       	ldi	r30, 0x2B	; 43
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 95       	swap	r24
     b9a:	86 95       	lsr	r24
     b9c:	87 70       	andi	r24, 0x07	; 7
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	90 70       	andi	r25, 0x00	; 0
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	a1 f3       	breq	.-24     	; 0xb92 <UART_Send+0xc>
	UDR=data;
     baa:	ec e2       	ldi	r30, 0x2C	; 44
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 83       	st	Z, r24

}
     bb2:	0f 90       	pop	r0
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <UART_Receive>:

u8 UART_Receive(void)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	while(!READ_BIT(UCSRA,RXC));
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 23       	and	r24, r24
     bca:	dc f7       	brge	.-10     	; 0xbc2 <UART_Receive+0x8>
	return UDR;
     bcc:	ec e2       	ldi	r30, 0x2C	; 44
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
}
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <UART_ReceivePerodic>:

u8 UART_ReceivePerodic(u8*pdata)
{
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	00 d0       	rcall	.+0      	; 0xbde <UART_ReceivePerodic+0x6>
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UCSRA,RXC))
     be8:	eb e2       	ldi	r30, 0x2B	; 43
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 23       	and	r24, r24
     bf0:	4c f4       	brge	.+18     	; 0xc04 <UART_ReceivePerodic+0x2c>
	{
		*pdata=UDR;
     bf2:	ec e2       	ldi	r30, 0x2C	; 44
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	e9 81       	ldd	r30, Y+1	; 0x01
     bfa:	fa 81       	ldd	r31, Y+2	; 0x02
     bfc:	80 83       	st	Z, r24
		return 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	8b 83       	std	Y+3, r24	; 0x03
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <UART_ReceivePerodic+0x2e>
	}
	return 0;
     c04:	1b 82       	std	Y+3, r1	; 0x03
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <TIMER0_voidTimer0OVFInit>:

static void (*TIMER_PFTimer0OVF) (void) ;
static void (*TIMER_PFTimer0CTC) (void) ;

void TIMER0_voidTimer0OVFInit(void)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
	/* Choose Normal mode */
	CLR_BIT(TCCR0 , WGM00);
     c1c:	a3 e5       	ldi	r26, 0x53	; 83
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e3 e5       	ldi	r30, 0x53	; 83
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8f 7b       	andi	r24, 0xBF	; 191
     c28:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , WGM01);
     c2a:	a3 e5       	ldi	r26, 0x53	; 83
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e3 e5       	ldi	r30, 0x53	; 83
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	87 7f       	andi	r24, 0xF7	; 247
     c36:	8c 93       	st	X, r24

	/* Enable Timer/Counter0 Overflow */
	SET_BIT(TIMSK , TOIE0);
     c38:	a9 e5       	ldi	r26, 0x59	; 89
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e9 e5       	ldi	r30, 0x59	; 89
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	8c 93       	st	X, r24

	/* Initial Preload value ==> Desired Time = 1S */
	TCNT0 = 192 ;
     c46:	e2 e5       	ldi	r30, 0x52	; 82
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 ec       	ldi	r24, 0xC0	; 192
     c4c:	80 83       	st	Z, r24

	/* Select clock " CLK \ 8" ==> Prescaler */
	CLR_BIT(TCCR0 , CS00);
     c4e:	a3 e5       	ldi	r26, 0x53	; 83
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e3 e5       	ldi	r30, 0x53	; 83
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8e 7f       	andi	r24, 0xFE	; 254
     c5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , CS01);
     c5c:	a3 e5       	ldi	r26, 0x53	; 83
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e3 e5       	ldi	r30, 0x53	; 83
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	82 60       	ori	r24, 0x02	; 2
     c68:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , CS02);
     c6a:	a3 e5       	ldi	r26, 0x53	; 83
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e3 e5       	ldi	r30, 0x53	; 83
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	8c 93       	st	X, r24

}
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <TIMER0_voidTimer0CTCInit>:

void TIMER0_voidTimer0CTCInit(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	/* Choose CTC mode */
	CLR_BIT(TCCR0 , WGM00);
     c86:	a3 e5       	ldi	r26, 0x53	; 83
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e3 e5       	ldi	r30, 0x53	; 83
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8f 7b       	andi	r24, 0xBF	; 191
     c92:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , WGM01);
     c94:	a3 e5       	ldi	r26, 0x53	; 83
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e3 e5       	ldi	r30, 0x53	; 83
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	88 60       	ori	r24, 0x08	; 8
     ca0:	8c 93       	st	X, r24

	/* Enable Timer/Counter0 CTC AND OVF */
	SET_BIT(TIMSK , OCIE0);
     ca2:	a9 e5       	ldi	r26, 0x59	; 89
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e9 e5       	ldi	r30, 0x59	; 89
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	82 60       	ori	r24, 0x02	; 2
     cae:	8c 93       	st	X, r24

	/*Initial Compare match value ==> OCR = 100 & Desired Time = 1S */
	OCR0 = 99 ;
     cb0:	ec e5       	ldi	r30, 0x5C	; 92
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	83 e6       	ldi	r24, 0x63	; 99
     cb6:	80 83       	st	Z, r24

	/*Select clock " CLK \ 8" ==> Prescaler */
	CLR_BIT(TCCR0 , CS00);
     cb8:	a3 e5       	ldi	r26, 0x53	; 83
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e3 e5       	ldi	r30, 0x53	; 83
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , CS01);
     cc6:	a3 e5       	ldi	r26, 0x53	; 83
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	82 60       	ori	r24, 0x02	; 2
     cd2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , CS02);
     cd4:	a3 e5       	ldi	r26, 0x53	; 83
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e3 e5       	ldi	r30, 0x53	; 83
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8b 7f       	andi	r24, 0xFB	; 251
     ce0:	8c 93       	st	X, r24

}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <TIMER0_voidTimer0OVFSetCallBack>:
void TIMER0_voidTimer0OVFSetCallBack (void (*Copy_PFvoidTimer0OVF)(void))
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	00 d0       	rcall	.+0      	; 0xcee <TIMER0_voidTimer0OVFSetCallBack+0x6>
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTimer0OVF = Copy_PFvoidTimer0OVF ;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	90 93 31 01 	sts	0x0131, r25
     cfe:	80 93 30 01 	sts	0x0130, r24
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <TIMER0_voidTimer0CTCSetCallBack>:

void TIMER0_voidTimer0CTCSetCallBack (void (*Copy_PFvoidTimer0CTC) (void))
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <TIMER0_voidTimer0CTCSetCallBack+0x6>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	9a 83       	std	Y+2, r25	; 0x02
     d18:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTimer0CTC = Copy_PFvoidTimer0CTC ;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	90 93 33 01 	sts	0x0133, r25
     d22:	80 93 32 01 	sts	0x0132, r24
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <ISR>:

ISR (TIMER0_OVF_vect)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <ISR+0x6>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <ISR+0x8>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	89 83       	std	Y+1, r24	; 0x01
	static u16 Local_u8OVFCounter = 0 ;
	Local_u8OVFCounter ++ ;
     d40:	80 91 2e 01 	lds	r24, 0x012E
     d44:	90 91 2f 01 	lds	r25, 0x012F
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	90 93 2f 01 	sts	0x012F, r25
     d4e:	80 93 2e 01 	sts	0x012E, r24
	if (Local_u8OVFCounter == 3907)
     d52:	80 91 2e 01 	lds	r24, 0x012E
     d56:	90 91 2f 01 	lds	r25, 0x012F
     d5a:	2f e0       	ldi	r18, 0x0F	; 15
     d5c:	83 34       	cpi	r24, 0x43	; 67
     d5e:	92 07       	cpc	r25, r18
     d60:	69 f4       	brne	.+26     	; 0xd7c <ISR+0x4c>
	{
		/* Clear Local_u8OVFCounter */
		Local_u8OVFCounter = 0 ;
     d62:	10 92 2f 01 	sts	0x012F, r1
     d66:	10 92 2e 01 	sts	0x012E, r1
		/* Initial Preload value */
		TCNT0 = 192 ;
     d6a:	e2 e5       	ldi	r30, 0x52	; 82
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 ec       	ldi	r24, 0xC0	; 192
     d70:	80 83       	st	Z, r24
		/*Action*/
		TIMER_PFTimer0OVF() ;
     d72:	e0 91 30 01 	lds	r30, 0x0130
     d76:	f0 91 31 01 	lds	r31, 0x0131
     d7a:	09 95       	icall
	}
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <EXI_Enable>:
static void (*INT1_Fptr) (void)=  NULLPTR;
static void (*INT2_Fptr) (void)=  NULLPTR;

/************************************Enable/Disable functions***********************************/
void EXI_Enable(ExInterruptSource_type Interrupt)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <EXI_Enable+0x6>
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3b 83       	std	Y+3, r19	; 0x03
     da0:	2a 83       	std	Y+2, r18	; 0x02
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	9b 81       	ldd	r25, Y+3	; 0x03
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	89 f0       	breq	.+34     	; 0xdce <EXI_Enable+0x44>
     dac:	2a 81       	ldd	r18, Y+2	; 0x02
     dae:	3b 81       	ldd	r19, Y+3	; 0x03
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	a1 f0       	breq	.+40     	; 0xdde <EXI_Enable+0x54>
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	b9 f4       	brne	.+46     	; 0xdec <EXI_Enable+0x62>
		case EX_INT0:
		SET_BIT(GICR,INT0);
     dbe:	ab e5       	ldi	r26, 0x5B	; 91
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	eb e5       	ldi	r30, 0x5B	; 91
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	80 64       	ori	r24, 0x40	; 64
     dca:	8c 93       	st	X, r24
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <EXI_Enable+0x62>
		break;
		case EX_INT1:
		SET_BIT(GICR,INT1);
     dce:	ab e5       	ldi	r26, 0x5B	; 91
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e5       	ldi	r30, 0x5B	; 91
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 68       	ori	r24, 0x80	; 128
     dda:	8c 93       	st	X, r24
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <EXI_Enable+0x62>
		break;
		case EX_INT2:
		SET_BIT(GICR,INT2);
     dde:	ab e5       	ldi	r26, 0x5B	; 91
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	eb e5       	ldi	r30, 0x5B	; 91
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 62       	ori	r24, 0x20	; 32
     dea:	8c 93       	st	X, r24
		break;
	}
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <EXI_Disable>:

void EXI_Disable(ExInterruptSource_type Interrupt)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <EXI_Disable+0x6>
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3b 83       	std	Y+3, r19	; 0x03
     e0e:	2a 83       	std	Y+2, r18	; 0x02
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	89 f0       	breq	.+34     	; 0xe3c <EXI_Disable+0x44>
     e1a:	2a 81       	ldd	r18, Y+2	; 0x02
     e1c:	3b 81       	ldd	r19, Y+3	; 0x03
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	a1 f0       	breq	.+40     	; 0xe4c <EXI_Disable+0x54>
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	b9 f4       	brne	.+46     	; 0xe5a <EXI_Disable+0x62>
		case EX_INT0:
		CLR_BIT(GICR,INT0);
     e2c:	ab e5       	ldi	r26, 0x5B	; 91
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	eb e5       	ldi	r30, 0x5B	; 91
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7b       	andi	r24, 0xBF	; 191
     e38:	8c 93       	st	X, r24
     e3a:	0f c0       	rjmp	.+30     	; 0xe5a <EXI_Disable+0x62>
		break;
		case EX_INT1:
		CLR_BIT(GICR,INT1);
     e3c:	ab e5       	ldi	r26, 0x5B	; 91
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e5       	ldi	r30, 0x5B	; 91
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 77       	andi	r24, 0x7F	; 127
     e48:	8c 93       	st	X, r24
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <EXI_Disable+0x62>
		break;
		case EX_INT2:
		CLR_BIT(GICR,INT2);
     e4c:	ab e5       	ldi	r26, 0x5B	; 91
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	eb e5       	ldi	r30, 0x5B	; 91
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8f 7d       	andi	r24, 0xDF	; 223
     e58:	8c 93       	st	X, r24
		break;
	}
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <EXI_Init>:

void EXI_Init(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	EXI_TriggerEdge(EX_INT0,FALLING_EDGE);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	62 e0       	ldi	r22, 0x02	; 2
     e72:	0e 94 46 07 	call	0xe8c	; 0xe8c <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	0e 94 46 07 	call	0xe8c	; 0xe8c <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	0e 94 46 07 	call	0xe8c	; 0xe8c <EXI_TriggerEdge>
}
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <EXI_TriggerEdge>:


/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	2a 97       	sbiw	r28, 0x0a	; 10
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3a 87       	std	Y+10, r19	; 0x0a
     eac:	29 87       	std	Y+9, r18	; 0x09
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	91 05       	cpc	r25, r1
     eb6:	09 f4       	brne	.+2      	; 0xeba <EXI_TriggerEdge+0x2e>
     eb8:	66 c0       	rjmp	.+204    	; 0xf86 <EXI_TriggerEdge+0xfa>
     eba:	29 85       	ldd	r18, Y+9	; 0x09
     ebc:	3a 85       	ldd	r19, Y+10	; 0x0a
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	09 f4       	brne	.+2      	; 0xec6 <EXI_TriggerEdge+0x3a>
     ec4:	bb c0       	rjmp	.+374    	; 0x103c <EXI_TriggerEdge+0x1b0>
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	09 f0       	breq	.+2      	; 0xed0 <EXI_TriggerEdge+0x44>
     ece:	dd c0       	rjmp	.+442    	; 0x108a <EXI_TriggerEdge+0x1fe>
		case EX_INT0:
		switch(Edge){
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	38 87       	std	Y+8, r19	; 0x08
     ed8:	2f 83       	std	Y+7, r18	; 0x07
     eda:	8f 81       	ldd	r24, Y+7	; 0x07
     edc:	98 85       	ldd	r25, Y+8	; 0x08
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	21 f1       	breq	.+72     	; 0xf2c <EXI_TriggerEdge+0xa0>
     ee4:	2f 81       	ldd	r18, Y+7	; 0x07
     ee6:	38 85       	ldd	r19, Y+8	; 0x08
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <EXI_TriggerEdge+0x6c>
     eee:	8f 81       	ldd	r24, Y+7	; 0x07
     ef0:	98 85       	ldd	r25, Y+8	; 0x08
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	61 f0       	breq	.+24     	; 0xf0e <EXI_TriggerEdge+0x82>
     ef6:	c9 c0       	rjmp	.+402    	; 0x108a <EXI_TriggerEdge+0x1fe>
     ef8:	2f 81       	ldd	r18, Y+7	; 0x07
     efa:	38 85       	ldd	r19, Y+8	; 0x08
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	21 f1       	breq	.+72     	; 0xf4a <EXI_TriggerEdge+0xbe>
     f02:	8f 81       	ldd	r24, Y+7	; 0x07
     f04:	98 85       	ldd	r25, Y+8	; 0x08
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	71 f1       	breq	.+92     	; 0xf68 <EXI_TriggerEdge+0xdc>
     f0c:	be c0       	rjmp	.+380    	; 0x108a <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
     f0e:	a5 e5       	ldi	r26, 0x55	; 85
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e5 e5       	ldi	r30, 0x55	; 85
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     f1c:	a5 e5       	ldi	r26, 0x55	; 85
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e5       	ldi	r30, 0x55	; 85
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8d 7f       	andi	r24, 0xFD	; 253
     f28:	8c 93       	st	X, r24
     f2a:	af c0       	rjmp	.+350    	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
     f2c:	a5 e5       	ldi	r26, 0x55	; 85
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e5 e5       	ldi	r30, 0x55	; 85
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     f3a:	a5 e5       	ldi	r26, 0x55	; 85
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e5 e5       	ldi	r30, 0x55	; 85
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8d 7f       	andi	r24, 0xFD	; 253
     f46:	8c 93       	st	X, r24
     f48:	a0 c0       	rjmp	.+320    	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
     f4a:	a5 e5       	ldi	r26, 0x55	; 85
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e5       	ldi	r30, 0x55	; 85
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8e 7f       	andi	r24, 0xFE	; 254
     f56:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     f58:	a5 e5       	ldi	r26, 0x55	; 85
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e5 e5       	ldi	r30, 0x55	; 85
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	8c 93       	st	X, r24
     f66:	91 c0       	rjmp	.+290    	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     f68:	a5 e5       	ldi	r26, 0x55	; 85
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e5       	ldi	r30, 0x55	; 85
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     f76:	a5 e5       	ldi	r26, 0x55	; 85
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e5       	ldi	r30, 0x55	; 85
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	8c 93       	st	X, r24
     f84:	82 c0       	rjmp	.+260    	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;

		}
		break;
		case EX_INT1:
		switch(Edge){
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	3e 83       	std	Y+6, r19	; 0x06
     f8e:	2d 83       	std	Y+5, r18	; 0x05
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	91 05       	cpc	r25, r1
     f98:	21 f1       	breq	.+72     	; 0xfe2 <EXI_TriggerEdge+0x156>
     f9a:	2d 81       	ldd	r18, Y+5	; 0x05
     f9c:	3e 81       	ldd	r19, Y+6	; 0x06
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f4       	brge	.+10     	; 0xfae <EXI_TriggerEdge+0x122>
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	61 f0       	breq	.+24     	; 0xfc4 <EXI_TriggerEdge+0x138>
     fac:	6e c0       	rjmp	.+220    	; 0x108a <EXI_TriggerEdge+0x1fe>
     fae:	2d 81       	ldd	r18, Y+5	; 0x05
     fb0:	3e 81       	ldd	r19, Y+6	; 0x06
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	21 f1       	breq	.+72     	; 0x1000 <EXI_TriggerEdge+0x174>
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	91 05       	cpc	r25, r1
     fc0:	71 f1       	breq	.+92     	; 0x101e <EXI_TriggerEdge+0x192>
     fc2:	63 c0       	rjmp	.+198    	; 0x108a <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8b 7f       	andi	r24, 0xFB	; 251
     fd0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
     fd2:	a5 e5       	ldi	r26, 0x55	; 85
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e5       	ldi	r30, 0x55	; 85
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	87 7f       	andi	r24, 0xF7	; 247
     fde:	8c 93       	st	X, r24
     fe0:	54 c0       	rjmp	.+168    	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
     fe2:	a5 e5       	ldi	r26, 0x55	; 85
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e5       	ldi	r30, 0x55	; 85
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	84 60       	ori	r24, 0x04	; 4
     fee:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
     ff0:	a5 e5       	ldi	r26, 0x55	; 85
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e5 e5       	ldi	r30, 0x55	; 85
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	87 7f       	andi	r24, 0xF7	; 247
     ffc:	8c 93       	st	X, r24
     ffe:	45 c0       	rjmp	.+138    	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
    1000:	a5 e5       	ldi	r26, 0x55	; 85
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e5       	ldi	r30, 0x55	; 85
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    100e:	a5 e5       	ldi	r26, 0x55	; 85
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e5       	ldi	r30, 0x55	; 85
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 60       	ori	r24, 0x08	; 8
    101a:	8c 93       	st	X, r24
    101c:	36 c0       	rjmp	.+108    	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    101e:	a5 e5       	ldi	r26, 0x55	; 85
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e5       	ldi	r30, 0x55	; 85
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    102c:	a5 e5       	ldi	r26, 0x55	; 85
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e5 e5       	ldi	r30, 0x55	; 85
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 60       	ori	r24, 0x08	; 8
    1038:	8c 93       	st	X, r24
    103a:	27 c0       	rjmp	.+78     	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;

		}
		break;
		case EX_INT2:
		switch(Edge){
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 83       	std	Y+4, r19	; 0x04
    1044:	2b 83       	std	Y+3, r18	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	91 05       	cpc	r25, r1
    104e:	31 f0       	breq	.+12     	; 0x105c <EXI_TriggerEdge+0x1d0>
    1050:	2b 81       	ldd	r18, Y+3	; 0x03
    1052:	3c 81       	ldd	r19, Y+4	; 0x04
    1054:	23 30       	cpi	r18, 0x03	; 3
    1056:	31 05       	cpc	r19, r1
    1058:	49 f0       	breq	.+18     	; 0x106c <EXI_TriggerEdge+0x1e0>
    105a:	10 c0       	rjmp	.+32     	; 0x107c <EXI_TriggerEdge+0x1f0>
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
    105c:	a4 e5       	ldi	r26, 0x54	; 84
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e5       	ldi	r30, 0x54	; 84
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 7b       	andi	r24, 0xBF	; 191
    1068:	8c 93       	st	X, r24
    106a:	0f c0       	rjmp	.+30     	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    106c:	a4 e5       	ldi	r26, 0x54	; 84
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e4 e5       	ldi	r30, 0x54	; 84
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	8c 93       	st	X, r24
    107a:	07 c0       	rjmp	.+14     	; 0x108a <EXI_TriggerEdge+0x1fe>
			break;
			default:
			CLR_BIT(MCUCSR,ISC2);
    107c:	a4 e5       	ldi	r26, 0x54	; 84
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 e5       	ldi	r30, 0x54	; 84
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8f 7b       	andi	r24, 0xBF	; 191
    1088:	8c 93       	st	X, r24
		}
		break;
	}
}
    108a:	2a 96       	adiw	r28, 0x0a	; 10
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <EXI_SetCallBack+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <EXI_SetCallBack+0x8>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	7b 83       	std	Y+3, r23	; 0x03
    10ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3d 83       	std	Y+5, r19	; 0x05
    10b8:	2c 83       	std	Y+4, r18	; 0x04
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	81 f0       	breq	.+32     	; 0x10e4 <EXI_SetCallBack+0x48>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	91 f0       	breq	.+36     	; 0x10f2 <EXI_SetCallBack+0x56>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	a1 f4       	brne	.+40     	; 0x10fe <EXI_SetCallBack+0x62>
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	90 93 35 01 	sts	0x0135, r25
    10de:	80 93 34 01 	sts	0x0134, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	90 93 37 01 	sts	0x0137, r25
    10ec:	80 93 36 01 	sts	0x0136, r24
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	9b 81       	ldd	r25, Y+3	; 0x03
    10f6:	90 93 39 01 	sts	0x0139, r25
    10fa:	80 93 38 01 	sts	0x0138, r24
		break;

	}
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <DIO_InitPin>:
#include "DIO_CFG.h"



static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2c 97       	sbiw	r28, 0x0c	; 12
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	8b 83       	std	Y+3, r24	; 0x03
    1124:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port = pin/8;
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	86 95       	lsr	r24
    112a:	86 95       	lsr	r24
    112c:	86 95       	lsr	r24
    112e:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	87 70       	andi	r24, 0x07	; 7
    1134:	89 83       	std	Y+1, r24	; 0x01

	switch(status)
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3c 87       	std	Y+12, r19	; 0x0c
    113e:	2b 87       	std	Y+11, r18	; 0x0b
    1140:	8b 85       	ldd	r24, Y+11	; 0x0b
    1142:	9c 85       	ldd	r25, Y+12	; 0x0c
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	09 f4       	brne	.+2      	; 0x114c <DIO_InitPin+0x3e>
    114a:	c9 c0       	rjmp	.+402    	; 0x12de <DIO_InitPin+0x1d0>
    114c:	2b 85       	ldd	r18, Y+11	; 0x0b
    114e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1150:	22 30       	cpi	r18, 0x02	; 2
    1152:	31 05       	cpc	r19, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <DIO_InitPin+0x4a>
    1156:	85 c1       	rjmp	.+778    	; 0x1462 <DIO_InitPin+0x354>
    1158:	8b 85       	ldd	r24, Y+11	; 0x0b
    115a:	9c 85       	ldd	r25, Y+12	; 0x0c
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	09 f0       	breq	.+2      	; 0x1162 <DIO_InitPin+0x54>
    1160:	3d c2       	rjmp	.+1146   	; 0x15dc <DIO_InitPin+0x4ce>
	{
		case OUTPUT:
		switch(port)
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3a 87       	std	Y+10, r19	; 0x0a
    116a:	29 87       	std	Y+9, r18	; 0x09
    116c:	89 85       	ldd	r24, Y+9	; 0x09
    116e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_InitPin+0x6a>
    1176:	3e c0       	rjmp	.+124    	; 0x11f4 <DIO_InitPin+0xe6>
    1178:	29 85       	ldd	r18, Y+9	; 0x09
    117a:	3a 85       	ldd	r19, Y+10	; 0x0a
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <DIO_InitPin+0x7e>
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	71 f0       	breq	.+28     	; 0x11a6 <DIO_InitPin+0x98>
    118a:	28 c2       	rjmp	.+1104   	; 0x15dc <DIO_InitPin+0x4ce>
    118c:	29 85       	ldd	r18, Y+9	; 0x09
    118e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_InitPin+0x8a>
    1196:	55 c0       	rjmp	.+170    	; 0x1242 <DIO_InitPin+0x134>
    1198:	89 85       	ldd	r24, Y+9	; 0x09
    119a:	9a 85       	ldd	r25, Y+10	; 0x0a
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <DIO_InitPin+0x96>
    11a2:	76 c0       	rjmp	.+236    	; 0x1290 <DIO_InitPin+0x182>
    11a4:	1b c2       	rjmp	.+1078   	; 0x15dc <DIO_InitPin+0x4ce>
		{
			case PA:
			SET_BIT(DDRA,pin_num);
    11a6:	aa e3       	ldi	r26, 0x3A	; 58
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ea e3       	ldi	r30, 0x3A	; 58
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_InitPin+0xb4>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	2a 95       	dec	r18
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_InitPin+0xb0>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
    11ca:	ab e3       	ldi	r26, 0x3B	; 59
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	eb e3       	ldi	r30, 0x3B	; 59
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_InitPin+0xda>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_InitPin+0xd6>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	f4 c1       	rjmp	.+1000   	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PB:
			SET_BIT(DDRB,pin_num);
    11f4:	a7 e3       	ldi	r26, 0x37	; 55
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e7 e3       	ldi	r30, 0x37	; 55
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_InitPin+0x102>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	2a 95       	dec	r18
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_InitPin+0xfe>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    1218:	a8 e3       	ldi	r26, 0x38	; 56
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e3       	ldi	r30, 0x38	; 56
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_InitPin+0x128>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_InitPin+0x124>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
    1240:	cd c1       	rjmp	.+922    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PC:
			SET_BIT(DDRC,pin_num);
    1242:	a4 e3       	ldi	r26, 0x34	; 52
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e4 e3       	ldi	r30, 0x34	; 52
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_InitPin+0x150>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	2a 95       	dec	r18
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_InitPin+0x14c>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    1266:	a5 e3       	ldi	r26, 0x35	; 53
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e3       	ldi	r30, 0x35	; 53
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_InitPin+0x176>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_InitPin+0x172>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	a6 c1       	rjmp	.+844    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PD:
			SET_BIT(DDRD,pin_num);
    1290:	a1 e3       	ldi	r26, 0x31	; 49
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e1 e3       	ldi	r30, 0x31	; 49
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_InitPin+0x19e>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	2a 95       	dec	r18
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_InitPin+0x19a>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    12b4:	a2 e3       	ldi	r26, 0x32	; 50
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_InitPin+0x1c4>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_InitPin+0x1c0>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	7f c1       	rjmp	.+766    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
		}
		break;
		case INFREE:
		switch(port)
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	38 87       	std	Y+8, r19	; 0x08
    12e6:	2f 83       	std	Y+7, r18	; 0x07
    12e8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ea:	98 85       	ldd	r25, Y+8	; 0x08
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <DIO_InitPin+0x1e6>
    12f2:	3f c0       	rjmp	.+126    	; 0x1372 <DIO_InitPin+0x264>
    12f4:	2f 81       	ldd	r18, Y+7	; 0x07
    12f6:	38 85       	ldd	r19, Y+8	; 0x08
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	2c f4       	brge	.+10     	; 0x1308 <DIO_InitPin+0x1fa>
    12fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1300:	98 85       	ldd	r25, Y+8	; 0x08
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	71 f0       	breq	.+28     	; 0x1322 <DIO_InitPin+0x214>
    1306:	6a c1       	rjmp	.+724    	; 0x15dc <DIO_InitPin+0x4ce>
    1308:	2f 81       	ldd	r18, Y+7	; 0x07
    130a:	38 85       	ldd	r19, Y+8	; 0x08
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	09 f4       	brne	.+2      	; 0x1314 <DIO_InitPin+0x206>
    1312:	57 c0       	rjmp	.+174    	; 0x13c2 <DIO_InitPin+0x2b4>
    1314:	8f 81       	ldd	r24, Y+7	; 0x07
    1316:	98 85       	ldd	r25, Y+8	; 0x08
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	91 05       	cpc	r25, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <DIO_InitPin+0x212>
    131e:	79 c0       	rjmp	.+242    	; 0x1412 <DIO_InitPin+0x304>
    1320:	5d c1       	rjmp	.+698    	; 0x15dc <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
    1322:	aa e3       	ldi	r26, 0x3A	; 58
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ea e3       	ldi	r30, 0x3A	; 58
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_InitPin+0x230>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	2a 95       	dec	r18
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_InitPin+0x22c>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
			CLR_BIT(PORTA,pin_num);
    1348:	ab e3       	ldi	r26, 0x3B	; 59
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_InitPin+0x258>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_InitPin+0x254>
    136a:	80 95       	com	r24
    136c:	84 23       	and	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	35 c1       	rjmp	.+618    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
    1372:	a7 e3       	ldi	r26, 0x37	; 55
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e7 e3       	ldi	r30, 0x37	; 55
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_InitPin+0x280>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	2a 95       	dec	r18
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_InitPin+0x27c>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_InitPin+0x2a8>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_InitPin+0x2a4>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	0d c1       	rjmp	.+538    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
    13c2:	a4 e3       	ldi	r26, 0x34	; 52
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e4 e3       	ldi	r30, 0x34	; 52
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_InitPin+0x2d0>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	2a 95       	dec	r18
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_InitPin+0x2cc>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_InitPin+0x2f8>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_InitPin+0x2f4>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	e5 c0       	rjmp	.+458    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    1412:	a1 e3       	ldi	r26, 0x31	; 49
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e1 e3       	ldi	r30, 0x31	; 49
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_InitPin+0x320>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	2a 95       	dec	r18
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_InitPin+0x31c>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_InitPin+0x348>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_InitPin+0x344>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	bd c0       	rjmp	.+378    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
		}
		break;
		case INPULL:
		switch(port)
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3e 83       	std	Y+6, r19	; 0x06
    146a:	2d 83       	std	Y+5, r18	; 0x05
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	09 f4       	brne	.+2      	; 0x1478 <DIO_InitPin+0x36a>
    1476:	3e c0       	rjmp	.+124    	; 0x14f4 <DIO_InitPin+0x3e6>
    1478:	2d 81       	ldd	r18, Y+5	; 0x05
    147a:	3e 81       	ldd	r19, Y+6	; 0x06
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <DIO_InitPin+0x37e>
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	71 f0       	breq	.+28     	; 0x14a6 <DIO_InitPin+0x398>
    148a:	a8 c0       	rjmp	.+336    	; 0x15dc <DIO_InitPin+0x4ce>
    148c:	2d 81       	ldd	r18, Y+5	; 0x05
    148e:	3e 81       	ldd	r19, Y+6	; 0x06
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <DIO_InitPin+0x38a>
    1496:	55 c0       	rjmp	.+170    	; 0x1542 <DIO_InitPin+0x434>
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <DIO_InitPin+0x396>
    14a2:	76 c0       	rjmp	.+236    	; 0x1590 <DIO_InitPin+0x482>
    14a4:	9b c0       	rjmp	.+310    	; 0x15dc <DIO_InitPin+0x4ce>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
    14a6:	aa e3       	ldi	r26, 0x3A	; 58
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ea e3       	ldi	r30, 0x3A	; 58
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_InitPin+0x3b4>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	2a 95       	dec	r18
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_InitPin+0x3b0>
    14c6:	80 95       	com	r24
    14c8:	84 23       	and	r24, r20
    14ca:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin_num);
    14cc:	ab e3       	ldi	r26, 0x3B	; 59
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	eb e3       	ldi	r30, 0x3B	; 59
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_InitPin+0x3dc>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_InitPin+0x3d8>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	74 c0       	rjmp	.+232    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
    14f4:	a7 e3       	ldi	r26, 0x37	; 55
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e7 e3       	ldi	r30, 0x37	; 55
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_InitPin+0x402>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	2a 95       	dec	r18
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_InitPin+0x3fe>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin_num);
    151a:	a8 e3       	ldi	r26, 0x38	; 56
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_InitPin+0x42a>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_InitPin+0x426>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	4d c0       	rjmp	.+154    	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
    1542:	a4 e3       	ldi	r26, 0x34	; 52
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e4 e3       	ldi	r30, 0x34	; 52
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_InitPin+0x450>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	2a 95       	dec	r18
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_InitPin+0x44c>
    1562:	80 95       	com	r24
    1564:	84 23       	and	r24, r20
    1566:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin_num);
    1568:	a5 e3       	ldi	r26, 0x35	; 53
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e3       	ldi	r30, 0x35	; 53
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_InitPin+0x478>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_InitPin+0x474>
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
    158e:	26 c0       	rjmp	.+76     	; 0x15dc <DIO_InitPin+0x4ce>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    1590:	a1 e3       	ldi	r26, 0x31	; 49
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e1 e3       	ldi	r30, 0x31	; 49
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_InitPin+0x49e>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	2a 95       	dec	r18
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_InitPin+0x49a>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin_num);
    15b6:	a2 e3       	ldi	r26, 0x32	; 50
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e2 e3       	ldi	r30, 0x32	; 50
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_InitPin+0x4c6>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_InitPin+0x4c2>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    15dc:	2c 96       	adiw	r28, 0x0c	; 12
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <DIO_Init>:

void DIO_Init(void)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
    15f8:	19 82       	std	Y+1, r1	; 0x01
    15fa:	0e c0       	rjmp	.+28     	; 0x1618 <DIO_Init+0x2a>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	fc 01       	movw	r30, r24
    1604:	ee 51       	subi	r30, 0x1E	; 30
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	90 81       	ld	r25, Z
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	69 2f       	mov	r22, r25
    160e:	0e 94 87 08 	call	0x110e	; 0x110e <DIO_InitPin>
}

void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	80 32       	cpi	r24, 0x20	; 32
    161c:	78 f3       	brcs	.-34     	; 0x15fc <DIO_Init+0xe>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}
}
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <DIO_WritePin>:

void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	28 97       	sbiw	r28, 0x08	; 8
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port =pin/8;
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	86 95       	lsr	r24
    1642:	86 95       	lsr	r24
    1644:	86 95       	lsr	r24
    1646:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	87 70       	andi	r24, 0x07	; 7
    164c:	89 83       	std	Y+1, r24	; 0x01

	if (volt==HIGH)
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	09 f0       	breq	.+2      	; 0x1656 <DIO_WritePin+0x30>
    1654:	6f c0       	rjmp	.+222    	; 0x1734 <DIO_WritePin+0x10e>
	{
		switch(port)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	38 87       	std	Y+8, r19	; 0x08
    165e:	2f 83       	std	Y+7, r18	; 0x07
    1660:	8f 81       	ldd	r24, Y+7	; 0x07
    1662:	98 85       	ldd	r25, Y+8	; 0x08
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	49 f1       	breq	.+82     	; 0x16bc <DIO_WritePin+0x96>
    166a:	2f 81       	ldd	r18, Y+7	; 0x07
    166c:	38 85       	ldd	r19, Y+8	; 0x08
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	2c f4       	brge	.+10     	; 0x167e <DIO_WritePin+0x58>
    1674:	8f 81       	ldd	r24, Y+7	; 0x07
    1676:	98 85       	ldd	r25, Y+8	; 0x08
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	61 f0       	breq	.+24     	; 0x1694 <DIO_WritePin+0x6e>
    167c:	d2 c0       	rjmp	.+420    	; 0x1822 <DIO_WritePin+0x1fc>
    167e:	2f 81       	ldd	r18, Y+7	; 0x07
    1680:	38 85       	ldd	r19, Y+8	; 0x08
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	71 f1       	breq	.+92     	; 0x16e4 <DIO_WritePin+0xbe>
    1688:	8f 81       	ldd	r24, Y+7	; 0x07
    168a:	98 85       	ldd	r25, Y+8	; 0x08
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	e9 f1       	breq	.+122    	; 0x170c <DIO_WritePin+0xe6>
    1692:	c7 c0       	rjmp	.+398    	; 0x1822 <DIO_WritePin+0x1fc>
		{
			case PA:
			SET_BIT(PORTA,pin_num);
    1694:	ab e3       	ldi	r26, 0x3B	; 59
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	eb e3       	ldi	r30, 0x3B	; 59
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_WritePin+0x8c>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_WritePin+0x88>
    16b6:	84 2b       	or	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	b3 c0       	rjmp	.+358    	; 0x1822 <DIO_WritePin+0x1fc>
			break;

			case PB:
			SET_BIT(PORTB,pin_num);
    16bc:	a8 e3       	ldi	r26, 0x38	; 56
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_WritePin+0xb4>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_WritePin+0xb0>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	9f c0       	rjmp	.+318    	; 0x1822 <DIO_WritePin+0x1fc>
			break;

			case PC:
			SET_BIT(PORTC,pin_num);
    16e4:	a5 e3       	ldi	r26, 0x35	; 53
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e3       	ldi	r30, 0x35	; 53
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_WritePin+0xdc>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_WritePin+0xd8>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	8b c0       	rjmp	.+278    	; 0x1822 <DIO_WritePin+0x1fc>
			break;

			case PD:
			SET_BIT(PORTD,pin_num);
    170c:	a2 e3       	ldi	r26, 0x32	; 50
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e2 e3       	ldi	r30, 0x32	; 50
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_WritePin+0x104>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_WritePin+0x100>
    172e:	84 2b       	or	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	77 c0       	rjmp	.+238    	; 0x1822 <DIO_WritePin+0x1fc>
			break;
		}

	}
	else if (volt==LOW)
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	88 23       	and	r24, r24
    1738:	09 f0       	breq	.+2      	; 0x173c <DIO_WritePin+0x116>
    173a:	73 c0       	rjmp	.+230    	; 0x1822 <DIO_WritePin+0x1fc>
	{
		switch(port)
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3e 83       	std	Y+6, r19	; 0x06
    1744:	2d 83       	std	Y+5, r18	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	59 f1       	breq	.+86     	; 0x17a6 <DIO_WritePin+0x180>
    1750:	2d 81       	ldd	r18, Y+5	; 0x05
    1752:	3e 81       	ldd	r19, Y+6	; 0x06
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	2c f4       	brge	.+10     	; 0x1764 <DIO_WritePin+0x13e>
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f0       	breq	.+26     	; 0x177c <DIO_WritePin+0x156>
    1762:	5f c0       	rjmp	.+190    	; 0x1822 <DIO_WritePin+0x1fc>
    1764:	2d 81       	ldd	r18, Y+5	; 0x05
    1766:	3e 81       	ldd	r19, Y+6	; 0x06
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	89 f1       	breq	.+98     	; 0x17d0 <DIO_WritePin+0x1aa>
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <DIO_WritePin+0x154>
    1778:	40 c0       	rjmp	.+128    	; 0x17fa <DIO_WritePin+0x1d4>
    177a:	53 c0       	rjmp	.+166    	; 0x1822 <DIO_WritePin+0x1fc>
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
    177c:	ab e3       	ldi	r26, 0x3B	; 59
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e3       	ldi	r30, 0x3B	; 59
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_WritePin+0x174>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_WritePin+0x170>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	3e c0       	rjmp	.+124    	; 0x1822 <DIO_WritePin+0x1fc>
			break;

			case PB:
			CLR_BIT(PORTB,pin_num);
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_WritePin+0x19e>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_WritePin+0x19a>
    17c8:	80 95       	com	r24
    17ca:	84 23       	and	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	29 c0       	rjmp	.+82     	; 0x1822 <DIO_WritePin+0x1fc>
			break;

			case PC:
			CLR_BIT(PORTC,pin_num);
    17d0:	a5 e3       	ldi	r26, 0x35	; 53
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e5 e3       	ldi	r30, 0x35	; 53
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_WritePin+0x1c8>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_WritePin+0x1c4>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <DIO_WritePin+0x1fc>
			break;

			case PD:
			CLR_BIT(PORTD,pin_num);
    17fa:	a2 e3       	ldi	r26, 0x32	; 50
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e2 e3       	ldi	r30, 0x32	; 50
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_WritePin+0x1f2>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_WritePin+0x1ee>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
	else
	{
		/* do nothing */
	}

}
    1822:	28 96       	adiw	r28, 0x08	; 8
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <DIO_ReadPin>:

DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <DIO_ReadPin+0x6>
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_ReadPin+0x8>
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO_ReadPin+0xa>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Port_type port =pin/8;
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	86 95       	lsr	r24
    1848:	86 95       	lsr	r24
    184a:	86 95       	lsr	r24
    184c:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num=pin%8;
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	87 70       	andi	r24, 0x07	; 7
    1852:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type volt=LOW;
    1854:	19 82       	std	Y+1, r1	; 0x01

	switch(port)
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	3e 83       	std	Y+6, r19	; 0x06
    185e:	2d 83       	std	Y+5, r18	; 0x05
    1860:	4d 81       	ldd	r20, Y+5	; 0x05
    1862:	5e 81       	ldd	r21, Y+6	; 0x06
    1864:	41 30       	cpi	r20, 0x01	; 1
    1866:	51 05       	cpc	r21, r1
    1868:	41 f1       	breq	.+80     	; 0x18ba <DIO_ReadPin+0x86>
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	91 05       	cpc	r25, r1
    1872:	34 f4       	brge	.+12     	; 0x1880 <DIO_ReadPin+0x4c>
    1874:	2d 81       	ldd	r18, Y+5	; 0x05
    1876:	3e 81       	ldd	r19, Y+6	; 0x06
    1878:	21 15       	cp	r18, r1
    187a:	31 05       	cpc	r19, r1
    187c:	61 f0       	breq	.+24     	; 0x1896 <DIO_ReadPin+0x62>
    187e:	52 c0       	rjmp	.+164    	; 0x1924 <DIO_ReadPin+0xf0>
    1880:	4d 81       	ldd	r20, Y+5	; 0x05
    1882:	5e 81       	ldd	r21, Y+6	; 0x06
    1884:	42 30       	cpi	r20, 0x02	; 2
    1886:	51 05       	cpc	r21, r1
    1888:	51 f1       	breq	.+84     	; 0x18de <DIO_ReadPin+0xaa>
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	91 05       	cpc	r25, r1
    1892:	b9 f1       	breq	.+110    	; 0x1902 <DIO_ReadPin+0xce>
    1894:	47 c0       	rjmp	.+142    	; 0x1924 <DIO_ReadPin+0xf0>
	{
		case PA:
		volt=READ_BIT(PINA,pin_num);
    1896:	e9 e3       	ldi	r30, 0x39	; 57
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_ReadPin+0x7a>
    18aa:	55 95       	asr	r21
    18ac:	47 95       	ror	r20
    18ae:	8a 95       	dec	r24
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_ReadPin+0x76>
    18b2:	ca 01       	movw	r24, r20
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	35 c0       	rjmp	.+106    	; 0x1924 <DIO_ReadPin+0xf0>
		break;
		case PB:
		volt=READ_BIT(PINB,pin_num);
    18ba:	e6 e3       	ldi	r30, 0x36	; 54
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a9 01       	movw	r20, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_ReadPin+0x9e>
    18ce:	55 95       	asr	r21
    18d0:	47 95       	ror	r20
    18d2:	8a 95       	dec	r24
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_ReadPin+0x9a>
    18d6:	ca 01       	movw	r24, r20
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	23 c0       	rjmp	.+70     	; 0x1924 <DIO_ReadPin+0xf0>
		break;
		case PC:
		volt=READ_BIT(PINC,pin_num);
    18de:	e3 e3       	ldi	r30, 0x33	; 51
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_ReadPin+0xc2>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_ReadPin+0xbe>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <DIO_ReadPin+0xf0>
		break;
		case PD:
		volt=READ_BIT(PIND,pin_num);
    1902:	e0 e3       	ldi	r30, 0x30	; 48
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_ReadPin+0xe6>
    1916:	55 95       	asr	r21
    1918:	47 95       	ror	r20
    191a:	8a 95       	dec	r24
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_ReadPin+0xe2>
    191e:	ca 01       	movw	r24, r20
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return volt;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
}
    1926:	26 96       	adiw	r28, 0x06	; 6
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port,u8 value){
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <DIO_WritePort+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <DIO_WritePort+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3c 83       	std	Y+4, r19	; 0x04
    1950:	2b 83       	std	Y+3, r18	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	d1 f0       	breq	.+52     	; 0x1990 <DIO_WritePort+0x58>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	2c f4       	brge	.+10     	; 0x1970 <DIO_WritePort+0x38>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	61 f0       	breq	.+24     	; 0x1986 <DIO_WritePort+0x4e>
    196e:	1e c0       	rjmp	.+60     	; 0x19ac <DIO_WritePort+0x74>
    1970:	2b 81       	ldd	r18, Y+3	; 0x03
    1972:	3c 81       	ldd	r19, Y+4	; 0x04
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	81 f0       	breq	.+32     	; 0x199a <DIO_WritePort+0x62>
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	91 05       	cpc	r25, r1
    1982:	81 f0       	breq	.+32     	; 0x19a4 <DIO_WritePort+0x6c>
    1984:	13 c0       	rjmp	.+38     	; 0x19ac <DIO_WritePort+0x74>
	{
		case PA:
		PORTA=value;
    1986:	eb e3       	ldi	r30, 0x3B	; 59
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 83       	st	Z, r24
    198e:	0e c0       	rjmp	.+28     	; 0x19ac <DIO_WritePort+0x74>
		break;
		case PB:
		PORTB=value;
    1990:	e8 e3       	ldi	r30, 0x38	; 56
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	80 83       	st	Z, r24
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <DIO_WritePort+0x74>
		break;
		case PC:
		PORTC=value;
    199a:	e5 e3       	ldi	r30, 0x35	; 53
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	80 83       	st	Z, r24
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <DIO_WritePort+0x74>
		break;
		case PD:
		PORTD=value;
    19a4:	e2 e3       	ldi	r30, 0x32	; 50
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	80 83       	st	Z, r24
		break;
	}
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <DIO_ReadPort>:

u8 DIO_ReadPort(DIO_Port_type port){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <DIO_ReadPort+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <DIO_ReadPort+0x8>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 value=0;
    19c8:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	3c 83       	std	Y+4, r19	; 0x04
    19d2:	2b 83       	std	Y+3, r18	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	91 05       	cpc	r25, r1
    19dc:	d1 f0       	breq	.+52     	; 0x1a12 <DIO_ReadPort+0x58>
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	3c 81       	ldd	r19, Y+4	; 0x04
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <DIO_ReadPort+0x38>
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	61 f0       	breq	.+24     	; 0x1a08 <DIO_ReadPort+0x4e>
    19f0:	1e c0       	rjmp	.+60     	; 0x1a2e <DIO_ReadPort+0x74>
    19f2:	2b 81       	ldd	r18, Y+3	; 0x03
    19f4:	3c 81       	ldd	r19, Y+4	; 0x04
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <DIO_ReadPort+0x62>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	81 f0       	breq	.+32     	; 0x1a26 <DIO_ReadPort+0x6c>
    1a06:	13 c0       	rjmp	.+38     	; 0x1a2e <DIO_ReadPort+0x74>
	{
		case PA:
		value = PORTA;
    1a08:	eb e3       	ldi	r30, 0x3B	; 59
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <DIO_ReadPort+0x74>
		break;
		case PB:
		value = PORTB;
    1a12:	e8 e3       	ldi	r30, 0x38	; 56
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <DIO_ReadPort+0x74>
		break;
		case PC:
		value = PORTC;
    1a1c:	e5 e3       	ldi	r30, 0x35	; 53
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	04 c0       	rjmp	.+8      	; 0x1a2e <DIO_ReadPort+0x74>
		break;
		case PD:
		value = PORTD;
    1a26:	e2 e3       	ldi	r30, 0x32	; 50
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin){
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <DIO_TogglePin+0x6>
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <DIO_TogglePin+0x8>
    1a46:	0f 92       	push	r0
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin/8;
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	86 95       	lsr	r24
    1a52:	86 95       	lsr	r24
    1a54:	86 95       	lsr	r24
    1a56:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num = pin%8;
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	87 70       	andi	r24, 0x07	; 7
    1a5c:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3d 83       	std	Y+5, r19	; 0x05
    1a66:	2c 83       	std	Y+4, r18	; 0x04
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	91 05       	cpc	r25, r1
    1a70:	49 f1       	breq	.+82     	; 0x1ac4 <DIO_TogglePin+0x86>
    1a72:	2c 81       	ldd	r18, Y+4	; 0x04
    1a74:	3d 81       	ldd	r19, Y+5	; 0x05
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <DIO_TogglePin+0x48>
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	61 f0       	breq	.+24     	; 0x1a9c <DIO_TogglePin+0x5e>
    1a84:	5a c0       	rjmp	.+180    	; 0x1b3a <DIO_TogglePin+0xfc>
    1a86:	2c 81       	ldd	r18, Y+4	; 0x04
    1a88:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	71 f1       	breq	.+92     	; 0x1aec <DIO_TogglePin+0xae>
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	9d 81       	ldd	r25, Y+5	; 0x05
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	91 05       	cpc	r25, r1
    1a98:	e9 f1       	breq	.+122    	; 0x1b14 <DIO_TogglePin+0xd6>
    1a9a:	4f c0       	rjmp	.+158    	; 0x1b3a <DIO_TogglePin+0xfc>
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
    1a9c:	ab e3       	ldi	r26, 0x3B	; 59
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	eb e3       	ldi	r30, 0x3B	; 59
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_TogglePin+0x7c>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_TogglePin+0x78>
    1abe:	84 27       	eor	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	3b c0       	rjmp	.+118    	; 0x1b3a <DIO_TogglePin+0xfc>
		break;

		case PB:
		TOG_BIT(PORTB,pin_num);
    1ac4:	a8 e3       	ldi	r26, 0x38	; 56
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e3       	ldi	r30, 0x38	; 56
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <DIO_TogglePin+0xa4>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <DIO_TogglePin+0xa0>
    1ae6:	84 27       	eor	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	27 c0       	rjmp	.+78     	; 0x1b3a <DIO_TogglePin+0xfc>
		break;

		case PC:
		TOG_BIT(PORTC,pin_num);
    1aec:	a5 e3       	ldi	r26, 0x35	; 53
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e3       	ldi	r30, 0x35	; 53
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_TogglePin+0xcc>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <DIO_TogglePin+0xc8>
    1b0e:	84 27       	eor	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	13 c0       	rjmp	.+38     	; 0x1b3a <DIO_TogglePin+0xfc>
		break;

		case PD:
		TOG_BIT(PORTD,pin_num);
    1b14:	a2 e3       	ldi	r26, 0x32	; 50
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e2 e3       	ldi	r30, 0x32	; 50
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <DIO_TogglePin+0xf4>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <DIO_TogglePin+0xf0>
    1b36:	84 27       	eor	r24, r20
    1b38:	8c 93       	st	X, r24
		break;
	}
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <DIO_ReadStatus_CfgPin>:

DIO_PinStatus_type DIO_ReadStatus_CfgPin(DIO_Pin_type pin){
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <DIO_ReadStatus_CfgPin+0x6>
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <DIO_ReadStatus_CfgPin+0x8>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <DIO_ReadStatus_CfgPin+0xa>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Port_type port =pin/8;
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	86 95       	lsr	r24
    1b5e:	86 95       	lsr	r24
    1b60:	86 95       	lsr	r24
    1b62:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num=pin%8;
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	87 70       	andi	r24, 0x07	; 7
    1b68:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinStatus_type Status=0;
    1b6a:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3e 83       	std	Y+6, r19	; 0x06
    1b74:	2d 83       	std	Y+5, r18	; 0x05
    1b76:	4d 81       	ldd	r20, Y+5	; 0x05
    1b78:	5e 81       	ldd	r21, Y+6	; 0x06
    1b7a:	41 30       	cpi	r20, 0x01	; 1
    1b7c:	51 05       	cpc	r21, r1
    1b7e:	41 f1       	breq	.+80     	; 0x1bd0 <DIO_ReadStatus_CfgPin+0x86>
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	91 05       	cpc	r25, r1
    1b88:	34 f4       	brge	.+12     	; 0x1b96 <DIO_ReadStatus_CfgPin+0x4c>
    1b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8e:	21 15       	cp	r18, r1
    1b90:	31 05       	cpc	r19, r1
    1b92:	61 f0       	breq	.+24     	; 0x1bac <DIO_ReadStatus_CfgPin+0x62>
    1b94:	52 c0       	rjmp	.+164    	; 0x1c3a <DIO_ReadStatus_CfgPin+0xf0>
    1b96:	4d 81       	ldd	r20, Y+5	; 0x05
    1b98:	5e 81       	ldd	r21, Y+6	; 0x06
    1b9a:	42 30       	cpi	r20, 0x02	; 2
    1b9c:	51 05       	cpc	r21, r1
    1b9e:	51 f1       	breq	.+84     	; 0x1bf4 <DIO_ReadStatus_CfgPin+0xaa>
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	b9 f1       	breq	.+110    	; 0x1c18 <DIO_ReadStatus_CfgPin+0xce>
    1baa:	47 c0       	rjmp	.+142    	; 0x1c3a <DIO_ReadStatus_CfgPin+0xf0>
	{
		case PA:
			Status = READ_BIT(PORTA,pin_num);
    1bac:	eb e3       	ldi	r30, 0x3B	; 59
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_ReadStatus_CfgPin+0x7a>
    1bc0:	55 95       	asr	r21
    1bc2:	47 95       	ror	r20
    1bc4:	8a 95       	dec	r24
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_ReadStatus_CfgPin+0x76>
    1bc8:	ca 01       	movw	r24, r20
    1bca:	81 70       	andi	r24, 0x01	; 1
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	35 c0       	rjmp	.+106    	; 0x1c3a <DIO_ReadStatus_CfgPin+0xf0>
		break;
		case PB:
			Status = READ_BIT(PORTB,pin_num);
    1bd0:	e8 e3       	ldi	r30, 0x38	; 56
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_ReadStatus_CfgPin+0x9e>
    1be4:	55 95       	asr	r21
    1be6:	47 95       	ror	r20
    1be8:	8a 95       	dec	r24
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_ReadStatus_CfgPin+0x9a>
    1bec:	ca 01       	movw	r24, r20
    1bee:	81 70       	andi	r24, 0x01	; 1
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	23 c0       	rjmp	.+70     	; 0x1c3a <DIO_ReadStatus_CfgPin+0xf0>
		break;
		case PC:
			Status = READ_BIT(PORTC,pin_num);
    1bf4:	e5 e3       	ldi	r30, 0x35	; 53
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a9 01       	movw	r20, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_ReadStatus_CfgPin+0xc2>
    1c08:	55 95       	asr	r21
    1c0a:	47 95       	ror	r20
    1c0c:	8a 95       	dec	r24
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_ReadStatus_CfgPin+0xbe>
    1c10:	ca 01       	movw	r24, r20
    1c12:	81 70       	andi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	11 c0       	rjmp	.+34     	; 0x1c3a <DIO_ReadStatus_CfgPin+0xf0>
		break;
		case PD:
			Status = READ_BIT(PORTD,pin_num);
    1c18:	e2 e3       	ldi	r30, 0x32	; 50
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a9 01       	movw	r20, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_ReadStatus_CfgPin+0xe6>
    1c2c:	55 95       	asr	r21
    1c2e:	47 95       	ror	r20
    1c30:	8a 95       	dec	r24
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_ReadStatus_CfgPin+0xe2>
    1c34:	ca 01       	movw	r24, r20
    1c36:	81 70       	andi	r24, 0x01	; 1
    1c38:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Status;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3c:	26 96       	adiw	r28, 0x06	; 6
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <ADC_Init>:

u16 volt_ref;
static u8 ADC_ReadFlag = 0;

void ADC_Init(ADC_VoltRef_type vref,ADC_Prescaler_type scaler)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <ADC_Init+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <ADC_Init+0x8>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	6a 83       	std	Y+2, r22	; 0x02
	/* VREF*/
	switch(vref)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3c 83       	std	Y+4, r19	; 0x04
    1c66:	2b 83       	std	Y+3, r18	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	91 05       	cpc	r25, r1
    1c70:	f9 f0       	breq	.+62     	; 0x1cb0 <ADC_Init+0x62>
    1c72:	2b 81       	ldd	r18, Y+3	; 0x03
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	22 30       	cpi	r18, 0x02	; 2
    1c78:	31 05       	cpc	r19, r1
    1c7a:	79 f1       	breq	.+94     	; 0x1cda <ADC_Init+0x8c>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <ADC_Init+0x38>
    1c84:	3e c0       	rjmp	.+124    	; 0x1d02 <ADC_Init+0xb4>
	{	//VREF_AREF (REFS1,REFS0)(0,0)
		case VREF_AREF:
		CLR_BIT(ADMUX,REFS1);
    1c86:	a7 e2       	ldi	r26, 0x27	; 39
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e7 e2       	ldi	r30, 0x27	; 39
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	8f 77       	andi	r24, 0x7F	; 127
    1c92:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS0);
    1c94:	a7 e2       	ldi	r26, 0x27	; 39
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e7 e2       	ldi	r30, 0x27	; 39
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 7b       	andi	r24, 0xBF	; 191
    1ca0:	8c 93       	st	X, r24
		volt_ref= AREF;
    1ca2:	88 eb       	ldi	r24, 0xB8	; 184
    1ca4:	9b e0       	ldi	r25, 0x0B	; 11
    1ca6:	90 93 41 01 	sts	0x0141, r25
    1caa:	80 93 40 01 	sts	0x0140, r24
    1cae:	29 c0       	rjmp	.+82     	; 0x1d02 <ADC_Init+0xb4>
		break;
		//VREF_VCC (REFS1,REFS0)(0,1)
		case VREF_VCC:
		CLR_BIT(ADMUX,REFS1);
    1cb0:	a7 e2       	ldi	r26, 0x27	; 39
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e7 e2       	ldi	r30, 0x27	; 39
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 77       	andi	r24, 0x7F	; 127
    1cbc:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
    1cbe:	a7 e2       	ldi	r26, 0x27	; 39
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e7 e2       	ldi	r30, 0x27	; 39
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 64       	ori	r24, 0x40	; 64
    1cca:	8c 93       	st	X, r24
		volt_ref= 5000;
    1ccc:	88 e8       	ldi	r24, 0x88	; 136
    1cce:	93 e1       	ldi	r25, 0x13	; 19
    1cd0:	90 93 41 01 	sts	0x0141, r25
    1cd4:	80 93 40 01 	sts	0x0140, r24
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <ADC_Init+0xb4>
		break;
		//VREF_VCC (REFS1,REFS0)(1,1)
		case VREF_256:
		SET_BIT(ADMUX,REFS1);
    1cda:	a7 e2       	ldi	r26, 0x27	; 39
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e7 e2       	ldi	r30, 0x27	; 39
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	80 68       	ori	r24, 0x80	; 128
    1ce6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,REFS0);
    1ce8:	a7 e2       	ldi	r26, 0x27	; 39
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e7 e2       	ldi	r30, 0x27	; 39
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 64       	ori	r24, 0x40	; 64
    1cf4:	8c 93       	st	X, r24
		volt_ref= 2560;
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	9a e0       	ldi	r25, 0x0A	; 10
    1cfa:	90 93 41 01 	sts	0x0141, r25
    1cfe:	80 93 40 01 	sts	0x0140, r24
		break;
	}
		/*clock Setting Prescaler*/
		ADCSRA=ADCSRA&0xf8; // clear place for 3 bit of prescaler
    1d02:	a6 e2       	ldi	r26, 0x26	; 38
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e6 e2       	ldi	r30, 0x26	; 38
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 7f       	andi	r24, 0xF8	; 248
    1d0e:	8c 93       	st	X, r24
		scaler=scaler&0x07;  //check number not greater than 3bit by clear other bits
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	87 70       	andi	r24, 0x07	; 7
    1d14:	8a 83       	std	Y+2, r24	; 0x02
		ADCSRA=ADCSRA|scaler; //place data without change 5bits
    1d16:	a6 e2       	ldi	r26, 0x26	; 38
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e6 e2       	ldi	r30, 0x26	; 38
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	90 81       	ld	r25, Z
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	89 2b       	or	r24, r25
    1d24:	8c 93       	st	X, r24

	/*ADC enable*/
	SET_BIT(ADCSRA,ADEN);
    1d26:	a6 e2       	ldi	r26, 0x26	; 38
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e6 e2       	ldi	r30, 0x26	; 38
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 68       	ori	r24, 0x80	; 128
    1d32:	8c 93       	st	X, r24
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <ADC_Read>:

u16 ADC_Read(ADC_Channel_type channel)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
	/* select ch using MUX*/
		ADMUX=ADMUX& 0xe0;
    1d4e:	a7 e2       	ldi	r26, 0x27	; 39
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e7 e2       	ldi	r30, 0x27	; 39
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	80 7e       	andi	r24, 0xE0	; 224
    1d5a:	8c 93       	st	X, r24
		ADMUX=ADMUX | channel;
    1d5c:	a7 e2       	ldi	r26, 0x27	; 39
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e7 e2       	ldi	r30, 0x27	; 39
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	90 81       	ld	r25, Z
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	89 2b       	or	r24, r25
    1d6a:	8c 93       	st	X, r24
	/* start conversion*/
	//ADSC set 1 if we need work adc when finish read hardware write 0
		SET_BIT(ADCSRA,ADSC);
    1d6c:	a6 e2       	ldi	r26, 0x26	; 38
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e6 e2       	ldi	r30, 0x26	; 38
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	80 64       	ori	r24, 0x40	; 64
    1d78:	8c 93       	st	X, r24
	/*wait until end */
	  while(READ_BIT(ADCSRA,ADSC));
    1d7a:	e6 e2       	ldi	r30, 0x26	; 38
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	82 95       	swap	r24
    1d82:	86 95       	lsr	r24
    1d84:	86 95       	lsr	r24
    1d86:	83 70       	andi	r24, 0x03	; 3
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	81 70       	andi	r24, 0x01	; 1
    1d8e:	90 70       	andi	r25, 0x00	; 0
    1d90:	88 23       	and	r24, r24
    1d92:	99 f7       	brne	.-26     	; 0x1d7a <ADC_Read+0x38>
	/* get reading from 2 registers*/
	return ADC;
    1d94:	e4 e2       	ldi	r30, 0x24	; 36
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <ADC_StartConversion>:

void ADC_StartConversion(ADC_Channel_type channel){
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	89 83       	std	Y+1, r24	; 0x01
	if(!ADC_ReadFlag){
    1db0:	80 91 3a 01 	lds	r24, 0x013A
    1db4:	88 23       	and	r24, r24
    1db6:	c9 f4       	brne	.+50     	; 0x1dea <ADC_StartConversion+0x46>
		/* select ch using MUX*/
		ADMUX=ADMUX& 0xe0;
    1db8:	a7 e2       	ldi	r26, 0x27	; 39
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e7 e2       	ldi	r30, 0x27	; 39
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 7e       	andi	r24, 0xE0	; 224
    1dc4:	8c 93       	st	X, r24
		ADMUX=ADMUX | channel;
    1dc6:	a7 e2       	ldi	r26, 0x27	; 39
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e7 e2       	ldi	r30, 0x27	; 39
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	90 81       	ld	r25, Z
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	89 2b       	or	r24, r25
    1dd4:	8c 93       	st	X, r24
		/* start conversion*/
		//ADSC set 1 if we need work adc when finish read hardware write 0
		SET_BIT(ADCSRA,ADSC);
    1dd6:	a6 e2       	ldi	r26, 0x26	; 38
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e6 e2       	ldi	r30, 0x26	; 38
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 64       	ori	r24, 0x40	; 64
    1de2:	8c 93       	st	X, r24
		ADC_ReadFlag=1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 3a 01 	sts	0x013A, r24
	}
}
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <ADC_ReadVolt>:


// RETURN m_v
u16 ADC_ReadVolt(ADC_Channel_type CH){
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <ADC_ReadVolt+0xe>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <ADC_ReadVolt+0x10>
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	8d 83       	std	Y+5, r24	; 0x05
	u16 adc= ADC_Read(CH_0);
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <ADC_Read>
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
	u16 volt =(adc*(u32)volt_ref)/1024;
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	7c 01       	movw	r14, r24
    1e1a:	00 e0       	ldi	r16, 0x00	; 0
    1e1c:	10 e0       	ldi	r17, 0x00	; 0
    1e1e:	80 91 40 01 	lds	r24, 0x0140
    1e22:	90 91 41 01 	lds	r25, 0x0141
    1e26:	9c 01       	movw	r18, r24
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	b7 01       	movw	r22, r14
    1e30:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__mulsi3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	07 2e       	mov	r0, r23
    1e3a:	7a e0       	ldi	r23, 0x0A	; 10
    1e3c:	b6 95       	lsr	r27
    1e3e:	a7 95       	ror	r26
    1e40:	97 95       	ror	r25
    1e42:	87 95       	ror	r24
    1e44:	7a 95       	dec	r23
    1e46:	d1 f7       	brne	.-12     	; 0x1e3c <ADC_ReadVolt+0x4a>
    1e48:	70 2d       	mov	r23, r0
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	return volt;
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	ff 90       	pop	r15
    1e66:	ef 90       	pop	r14
    1e68:	08 95       	ret

00001e6a <Temp_Read>:


/******************* TEMP ***********************/

u16 Temp_Read(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <Temp_Read+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <Temp_Read+0x8>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	u16 volt = ADC_ReadVolt(LM35_CH); //0 -> 5000 mv
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <ADC_ReadVolt>
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03

	u16 temp = volt;
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01

	return temp;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <SEG_INT>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include <avr/io.h>
#include <util/delay.h>
#include "SEGMENT_Interface.h"

void  SEG_INT(void){
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePort(SEG_DDR,0XFF);
    1ea2:	ea e3       	ldi	r30, 0x3A	; 58
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	6f ef       	ldi	r22, 0xFF	; 255
    1eaa:	0e 94 9c 0c 	call	0x1938	; 0x1938 <DIO_WritePort>
}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <SEG1BCD_VoidSetVale>:
void SEG1BCD_VoidSetVale(int start , int end){
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	64 97       	sbiw	r28, 0x14	; 20
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	9a 8b       	std	Y+18, r25	; 0x12
    1eca:	89 8b       	std	Y+17, r24	; 0x11
    1ecc:	7c 8b       	std	Y+20, r23	; 0x14
    1ece:	6b 8b       	std	Y+19, r22	; 0x13

	for(int i= start ; i<= 9 && i <= end ;i++){
    1ed0:	89 89       	ldd	r24, Y+17	; 0x11
    1ed2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed4:	98 8b       	std	Y+16, r25	; 0x10
    1ed6:	8f 87       	std	Y+15, r24	; 0x0f
    1ed8:	7b c0       	rjmp	.+246    	; 0x1fd0 <SEG1BCD_VoidSetVale+0x11c>
		SEG_PORT = i;
    1eda:	eb e3       	ldi	r30, 0x3B	; 59
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee0:	80 83       	st	Z, r24
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a8 e4       	ldi	r26, 0x48	; 72
    1ee8:	b4 e4       	ldi	r27, 0x44	; 68
    1eea:	8b 87       	std	Y+11, r24	; 0x0b
    1eec:	9c 87       	std	Y+12, r25	; 0x0c
    1eee:	ad 87       	std	Y+13, r26	; 0x0d
    1ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a ef       	ldi	r20, 0xFA	; 250
    1f00:	54 e4       	ldi	r21, 0x44	; 68
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8f 83       	std	Y+7, r24	; 0x07
    1f0c:	98 87       	std	Y+8, r25	; 0x08
    1f0e:	a9 87       	std	Y+9, r26	; 0x09
    1f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <SEG1BCD_VoidSetVale+0x80>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <SEG1BCD_VoidSetVale+0xfe>
	else if (__tmp > 65535)
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	3f ef       	ldi	r19, 0xFF	; 255
    1f40:	4f e7       	ldi	r20, 0x7F	; 127
    1f42:	57 e4       	ldi	r21, 0x47	; 71
    1f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f48:	18 16       	cp	r1, r24
    1f4a:	4c f5       	brge	.+82     	; 0x1f9e <SEG1BCD_VoidSetVale+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e2       	ldi	r20, 0x20	; 32
    1f5a:	51 e4       	ldi	r21, 0x41	; 65
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <SEG1BCD_VoidSetVale+0xe0>
    1f76:	88 ec       	ldi	r24, 0xC8	; 200
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9c 83       	std	Y+4, r25	; 0x04
    1f7c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <SEG1BCD_VoidSetVale+0xce>
    1f86:	9c 83       	std	Y+4, r25	; 0x04
    1f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <SEG1BCD_VoidSetVale+0xc2>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <SEG1BCD_VoidSetVale+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <SEG1BCD_VoidSetVale+0x10a>
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
void  SEG_INT(void){
	DIO_WritePort(SEG_DDR,0XFF);
}
void SEG1BCD_VoidSetVale(int start , int end){

	for(int i= start ; i<= 9 && i <= end ;i++){
    1fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc8:	98 89       	ldd	r25, Y+16	; 0x10
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	98 89       	ldd	r25, Y+16	; 0x10
    1fd4:	8a 30       	cpi	r24, 0x0A	; 10
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	44 f4       	brge	.+16     	; 0x1fea <SEG1BCD_VoidSetVale+0x136>
    1fda:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fdc:	38 89       	ldd	r19, Y+16	; 0x10
    1fde:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe2:	82 17       	cp	r24, r18
    1fe4:	93 07       	cpc	r25, r19
    1fe6:	0c f0       	brlt	.+2      	; 0x1fea <SEG1BCD_VoidSetVale+0x136>
    1fe8:	78 cf       	rjmp	.-272    	; 0x1eda <SEG1BCD_VoidSetVale+0x26>
		SEG_PORT = i;
	 _delay_ms(800);
	}
}
    1fea:	64 96       	adiw	r28, 0x14	; 20
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <SEG2BCD_VoidSetVale>:
void SEG2BCD_VoidSetVale(int start , int end){
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	64 97       	sbiw	r28, 0x14	; 20
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
    2018:	7c 8b       	std	Y+20, r23	; 0x14
    201a:	6b 8b       	std	Y+19, r22	; 0x13
	for(int i = start ; i <= end;i++){
    201c:	89 89       	ldd	r24, Y+17	; 0x11
    201e:	9a 89       	ldd	r25, Y+18	; 0x12
    2020:	98 8b       	std	Y+16, r25	; 0x10
    2022:	8f 87       	std	Y+15, r24	; 0x0f
    2024:	98 c0       	rjmp	.+304    	; 0x2156 <SEG2BCD_VoidSetVale+0x15a>
		SEG_PORT = i%10;
    2026:	eb e3       	ldi	r30, 0x3B	; 59
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	2a e0       	ldi	r18, 0x0A	; 10
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	b9 01       	movw	r22, r18
    2034:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__divmodhi4>
    2038:	80 83       	st	Z, r24
		SEG_PORT = PORTA | ((i/10)<<4);
    203a:	0b e3       	ldi	r16, 0x3B	; 59
    203c:	10 e0       	ldi	r17, 0x00	; 0
    203e:	eb e3       	ldi	r30, 0x3B	; 59
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8f 85       	ldd	r24, Y+15	; 0x0f
    2048:	98 89       	ldd	r25, Y+16	; 0x10
    204a:	2a e0       	ldi	r18, 0x0A	; 10
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	b9 01       	movw	r22, r18
    2050:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__divmodhi4>
    2054:	cb 01       	movw	r24, r22
    2056:	82 95       	swap	r24
    2058:	92 95       	swap	r25
    205a:	90 7f       	andi	r25, 0xF0	; 240
    205c:	98 27       	eor	r25, r24
    205e:	80 7f       	andi	r24, 0xF0	; 240
    2060:	98 27       	eor	r25, r24
    2062:	84 2b       	or	r24, r20
    2064:	f8 01       	movw	r30, r16
    2066:	80 83       	st	Z, r24
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	aa ef       	ldi	r26, 0xFA	; 250
    206e:	b3 e4       	ldi	r27, 0x43	; 67
    2070:	8b 87       	std	Y+11, r24	; 0x0b
    2072:	9c 87       	std	Y+12, r25	; 0x0c
    2074:	ad 87       	std	Y+13, r26	; 0x0d
    2076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a ef       	ldi	r20, 0xFA	; 250
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8f 83       	std	Y+7, r24	; 0x07
    2092:	98 87       	std	Y+8, r25	; 0x08
    2094:	a9 87       	std	Y+9, r26	; 0x09
    2096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <SEG2BCD_VoidSetVale+0xbe>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <SEG2BCD_VoidSetVale+0x13c>
	else if (__tmp > 65535)
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <SEG2BCD_VoidSetVale+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <SEG2BCD_VoidSetVale+0x11e>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <SEG2BCD_VoidSetVale+0x10c>
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <SEG2BCD_VoidSetVale+0x100>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <SEG2BCD_VoidSetVale+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <SEG2BCD_VoidSetVale+0x148>
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
		SEG_PORT = i;
	 _delay_ms(800);
	}
}
void SEG2BCD_VoidSetVale(int start , int end){
	for(int i = start ; i <= end;i++){
    214c:	8f 85       	ldd	r24, Y+15	; 0x0f
    214e:	98 89       	ldd	r25, Y+16	; 0x10
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	98 8b       	std	Y+16, r25	; 0x10
    2154:	8f 87       	std	Y+15, r24	; 0x0f
    2156:	2f 85       	ldd	r18, Y+15	; 0x0f
    2158:	38 89       	ldd	r19, Y+16	; 0x10
    215a:	8b 89       	ldd	r24, Y+19	; 0x13
    215c:	9c 89       	ldd	r25, Y+20	; 0x14
    215e:	82 17       	cp	r24, r18
    2160:	93 07       	cpc	r25, r19
    2162:	0c f0       	brlt	.+2      	; 0x2166 <SEG2BCD_VoidSetVale+0x16a>
    2164:	60 cf       	rjmp	.-320    	; 0x2026 <SEG2BCD_VoidSetVale+0x2a>
		SEG_PORT = i%10;
		SEG_PORT = PORTA | ((i/10)<<4);
		_delay_ms(500);
	}
}
    2166:	64 96       	adiw	r28, 0x14	; 20
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	08 95       	ret

0000217c <MOTOR_Init>:
#include "../../SERVICES/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "MOTOR_CFG.h"
#include "MOTOR_Interface.h"

void MOTOR_Init(void){
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62

}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <MOTOR_Stop>:

void MOTOR_Stop(u8 motor)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	0f 92       	push	r0
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(MotorPinsArray[motor][IN1],LOW);
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	c9 01       	movw	r24, r18
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	82 0f       	add	r24, r18
    21a4:	93 1f       	adc	r25, r19
    21a6:	fc 01       	movw	r30, r24
    21a8:	ee 5f       	subi	r30, 0xFE	; 254
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	80 81       	ld	r24, Z
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
	DIO_WritePin(MotorPinsArray[motor][IN2],LOW);
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	c9 01       	movw	r24, r18
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	82 0f       	add	r24, r18
    21c2:	93 1f       	adc	r25, r19
    21c4:	fc 01       	movw	r30, r24
    21c6:	ed 5f       	subi	r30, 0xFD	; 253
    21c8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ca:	80 81       	ld	r24, Z
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
}
    21d2:	0f 90       	pop	r0
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <MOTOR_CW>:

void MOTOR_CW(u8 motor)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	0f 92       	push	r0
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(MotorPinsArray[motor][IN1],LOW);
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	c9 01       	movw	r24, r18
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	82 0f       	add	r24, r18
    21f4:	93 1f       	adc	r25, r19
    21f6:	fc 01       	movw	r30, r24
    21f8:	ee 5f       	subi	r30, 0xFE	; 254
    21fa:	fe 4f       	sbci	r31, 0xFE	; 254
    21fc:	80 81       	ld	r24, Z
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
	DIO_WritePin(MotorPinsArray[motor][IN2],HIGH);
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	c9 01       	movw	r24, r18
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	82 0f       	add	r24, r18
    2212:	93 1f       	adc	r25, r19
    2214:	fc 01       	movw	r30, r24
    2216:	ed 5f       	subi	r30, 0xFD	; 253
    2218:	fe 4f       	sbci	r31, 0xFE	; 254
    221a:	80 81       	ld	r24, Z
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
}
    2222:	0f 90       	pop	r0
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <MOTOR_CCW>:

void MOTOR_CCW(u8 motor)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	0f 92       	push	r0
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(MotorPinsArray[motor][IN1],HIGH);
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	c9 01       	movw	r24, r18
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	82 0f       	add	r24, r18
    2244:	93 1f       	adc	r25, r19
    2246:	fc 01       	movw	r30, r24
    2248:	ee 5f       	subi	r30, 0xFE	; 254
    224a:	fe 4f       	sbci	r31, 0xFE	; 254
    224c:	80 81       	ld	r24, Z
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
	DIO_WritePin(MotorPinsArray[motor][IN2],LOW);
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	c9 01       	movw	r24, r18
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	fc 01       	movw	r30, r24
    2266:	ed 5f       	subi	r30, 0xFD	; 253
    2268:	fe 4f       	sbci	r31, 0xFE	; 254
    226a:	80 81       	ld	r24, Z
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>

}
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <ON_LED>:
#include "../../SERVICES/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include <avr/io.h>
#include "LED_Interface.h"

void ON_LED(u8 PORT ,u8 PIN){
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <ON_LED+0x6>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	6a 83       	std	Y+2, r22	; 0x02
    if (PORT == PORT_A){
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	88 23       	and	r24, r24
    228c:	31 f5       	brne	.+76     	; 0x22da <ON_LED+0x60>
	SET_BIT(DDRA,PIN);
    228e:	aa e3       	ldi	r26, 0x3A	; 58
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	ea e3       	ldi	r30, 0x3A	; 58
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	48 2f       	mov	r20, r24
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <ON_LED+0x30>
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	2a 95       	dec	r18
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <ON_LED+0x2c>
    22ae:	84 2b       	or	r24, r20
    22b0:	8c 93       	st	X, r24
	SET_BIT(PORTA,PIN);
    22b2:	ab e3       	ldi	r26, 0x3B	; 59
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	eb e3       	ldi	r30, 0x3B	; 59
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <ON_LED+0x56>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <ON_LED+0x52>
    22d4:	84 2b       	or	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	7a c0       	rjmp	.+244    	; 0x23ce <ON_LED+0x154>
    }else if (PORT == PORT_B){
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	81 30       	cpi	r24, 0x01	; 1
    22de:	31 f5       	brne	.+76     	; 0x232c <ON_LED+0xb2>
	SET_BIT(DDRB,PIN);
    22e0:	a7 e3       	ldi	r26, 0x37	; 55
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e7 e3       	ldi	r30, 0x37	; 55
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	48 2f       	mov	r20, r24
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <ON_LED+0x82>
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	2a 95       	dec	r18
    22fe:	e2 f7       	brpl	.-8      	; 0x22f8 <ON_LED+0x7e>
    2300:	84 2b       	or	r24, r20
    2302:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN);
    2304:	a8 e3       	ldi	r26, 0x38	; 56
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e8 e3       	ldi	r30, 0x38	; 56
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	48 2f       	mov	r20, r24
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <ON_LED+0xa8>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <ON_LED+0xa4>
    2326:	84 2b       	or	r24, r20
    2328:	8c 93       	st	X, r24
    232a:	51 c0       	rjmp	.+162    	; 0x23ce <ON_LED+0x154>
    }else if (PORT == PORT_C){
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	31 f5       	brne	.+76     	; 0x237e <ON_LED+0x104>
	SET_BIT(DDRC,PIN);
    2332:	a4 e3       	ldi	r26, 0x34	; 52
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e4 e3       	ldi	r30, 0x34	; 52
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	48 2f       	mov	r20, r24
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	02 c0       	rjmp	.+4      	; 0x234e <ON_LED+0xd4>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	2a 95       	dec	r18
    2350:	e2 f7       	brpl	.-8      	; 0x234a <ON_LED+0xd0>
    2352:	84 2b       	or	r24, r20
    2354:	8c 93       	st	X, r24
	SET_BIT(PORTC,PIN);
    2356:	a5 e3       	ldi	r26, 0x35	; 53
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e3       	ldi	r30, 0x35	; 53
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	48 2f       	mov	r20, r24
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	02 2e       	mov	r0, r18
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <ON_LED+0xfa>
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	0a 94       	dec	r0
    2376:	e2 f7       	brpl	.-8      	; 0x2370 <ON_LED+0xf6>
    2378:	84 2b       	or	r24, r20
    237a:	8c 93       	st	X, r24
    237c:	28 c0       	rjmp	.+80     	; 0x23ce <ON_LED+0x154>
    }else if(PORT == PORT_D){
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	29 f5       	brne	.+74     	; 0x23ce <ON_LED+0x154>
	SET_BIT(DDRD,PIN);
    2384:	a1 e3       	ldi	r26, 0x31	; 49
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e1 e3       	ldi	r30, 0x31	; 49
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	48 2f       	mov	r20, r24
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <ON_LED+0x126>
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	2a 95       	dec	r18
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <ON_LED+0x122>
    23a4:	84 2b       	or	r24, r20
    23a6:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN);
    23a8:	a2 e3       	ldi	r26, 0x32	; 50
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e2 e3       	ldi	r30, 0x32	; 50
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	02 2e       	mov	r0, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <ON_LED+0x14c>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	0a 94       	dec	r0
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <ON_LED+0x148>
    23ca:	84 2b       	or	r24, r20
    23cc:	8c 93       	st	X, r24
    }
}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <OFF_LED>:
void OFF_LED(u8 PORT ,u8 PIN){
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <OFF_LED+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	6a 83       	std	Y+2, r22	; 0x02
	if (PORT == PORT_A){
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	88 23       	and	r24, r24
    23ea:	39 f5       	brne	.+78     	; 0x243a <OFF_LED+0x62>
		SET_BIT(DDRA,PIN);
    23ec:	aa e3       	ldi	r26, 0x3A	; 58
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	ea e3       	ldi	r30, 0x3A	; 58
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	48 2f       	mov	r20, r24
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <OFF_LED+0x30>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	2a 95       	dec	r18
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <OFF_LED+0x2c>
    240c:	84 2b       	or	r24, r20
    240e:	8c 93       	st	X, r24
		CLR_BIT(PORTA,PIN);
    2410:	ab e3       	ldi	r26, 0x3B	; 59
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	eb e3       	ldi	r30, 0x3B	; 59
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	48 2f       	mov	r20, r24
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <OFF_LED+0x56>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <OFF_LED+0x52>
    2432:	80 95       	com	r24
    2434:	84 23       	and	r24, r20
    2436:	8c 93       	st	X, r24
    2438:	7d c0       	rjmp	.+250    	; 0x2534 <OFF_LED+0x15c>
	    }else if (PORT == PORT_B){
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	39 f5       	brne	.+78     	; 0x248e <OFF_LED+0xb6>
		SET_BIT(DDRB,PIN);
    2440:	a7 e3       	ldi	r26, 0x37	; 55
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e7 e3       	ldi	r30, 0x37	; 55
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	48 2f       	mov	r20, r24
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	02 c0       	rjmp	.+4      	; 0x245c <OFF_LED+0x84>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	2a 95       	dec	r18
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <OFF_LED+0x80>
    2460:	84 2b       	or	r24, r20
    2462:	8c 93       	st	X, r24
		CLR_BIT(PORTB,PIN);
    2464:	a8 e3       	ldi	r26, 0x38	; 56
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e8 e3       	ldi	r30, 0x38	; 56
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	48 2f       	mov	r20, r24
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	02 2e       	mov	r0, r18
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <OFF_LED+0xaa>
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	0a 94       	dec	r0
    2484:	e2 f7       	brpl	.-8      	; 0x247e <OFF_LED+0xa6>
    2486:	80 95       	com	r24
    2488:	84 23       	and	r24, r20
    248a:	8c 93       	st	X, r24
    248c:	53 c0       	rjmp	.+166    	; 0x2534 <OFF_LED+0x15c>
	    }else if (PORT == PORT_C){
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	39 f5       	brne	.+78     	; 0x24e2 <OFF_LED+0x10a>
		SET_BIT(DDRC,PIN);
    2494:	a4 e3       	ldi	r26, 0x34	; 52
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e4 e3       	ldi	r30, 0x34	; 52
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <OFF_LED+0xd8>
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	2a 95       	dec	r18
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <OFF_LED+0xd4>
    24b4:	84 2b       	or	r24, r20
    24b6:	8c 93       	st	X, r24
		CLR_BIT(PORTC,PIN);
    24b8:	a5 e3       	ldi	r26, 0x35	; 53
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e5 e3       	ldi	r30, 0x35	; 53
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	48 2f       	mov	r20, r24
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	02 2e       	mov	r0, r18
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <OFF_LED+0xfe>
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	0a 94       	dec	r0
    24d8:	e2 f7       	brpl	.-8      	; 0x24d2 <OFF_LED+0xfa>
    24da:	80 95       	com	r24
    24dc:	84 23       	and	r24, r20
    24de:	8c 93       	st	X, r24
    24e0:	29 c0       	rjmp	.+82     	; 0x2534 <OFF_LED+0x15c>
	    }else if(PORT == PORT_D){
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	31 f5       	brne	.+76     	; 0x2534 <OFF_LED+0x15c>
		SET_BIT(DDRD,PIN);
    24e8:	a1 e3       	ldi	r26, 0x31	; 49
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e1 e3       	ldi	r30, 0x31	; 49
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <OFF_LED+0x12c>
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	2a 95       	dec	r18
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <OFF_LED+0x128>
    2508:	84 2b       	or	r24, r20
    250a:	8c 93       	st	X, r24
		CLR_BIT(PORTD,PIN);
    250c:	a2 e3       	ldi	r26, 0x32	; 50
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e2 e3       	ldi	r30, 0x32	; 50
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	48 2f       	mov	r20, r24
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <OFF_LED+0x152>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <OFF_LED+0x14e>
    252e:	80 95       	com	r24
    2530:	84 23       	and	r24, r20
    2532:	8c 93       	st	X, r24
	    };
}
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <LCD_EnClock>:
#include "util/delay.h"
#include "LCD_INTERFACE.h"
#include "LCD_CFG.h"

/*TO DO ANY PULE AFTER DATA*/
void LCD_EnClock(){
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	6c 97       	sbiw	r28, 0x1c	; 28
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
		DIO_WritePin(EN,HIGH);
    2552:	81 e1       	ldi	r24, 0x11	; 17
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 e8       	ldi	r26, 0x80	; 128
    2560:	bf e3       	ldi	r27, 0x3F	; 63
    2562:	89 8f       	std	Y+25, r24	; 0x19
    2564:	9a 8f       	std	Y+26, r25	; 0x1a
    2566:	ab 8f       	std	Y+27, r26	; 0x1b
    2568:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	69 8d       	ldd	r22, Y+25	; 0x19
    256c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4a ef       	ldi	r20, 0xFA	; 250
    2578:	54 e4       	ldi	r21, 0x44	; 68
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	8d 8b       	std	Y+21, r24	; 0x15
    2584:	9e 8b       	std	Y+22, r25	; 0x16
    2586:	af 8b       	std	Y+23, r26	; 0x17
    2588:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    258a:	6d 89       	ldd	r22, Y+21	; 0x15
    258c:	7e 89       	ldd	r23, Y+22	; 0x16
    258e:	8f 89       	ldd	r24, Y+23	; 0x17
    2590:	98 8d       	ldd	r25, Y+24	; 0x18
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	2c f4       	brge	.+10     	; 0x25ac <LCD_EnClock+0x6e>
		__ticks = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9c 8b       	std	Y+20, r25	; 0x14
    25a8:	8b 8b       	std	Y+19, r24	; 0x13
    25aa:	3f c0       	rjmp	.+126    	; 0x262a <LCD_EnClock+0xec>
	else if (__tmp > 65535)
    25ac:	6d 89       	ldd	r22, Y+21	; 0x15
    25ae:	7e 89       	ldd	r23, Y+22	; 0x16
    25b0:	8f 89       	ldd	r24, Y+23	; 0x17
    25b2:	98 8d       	ldd	r25, Y+24	; 0x18
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	4f e7       	ldi	r20, 0x7F	; 127
    25ba:	57 e4       	ldi	r21, 0x47	; 71
    25bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c0:	18 16       	cp	r1, r24
    25c2:	4c f5       	brge	.+82     	; 0x2616 <LCD_EnClock+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c4:	69 8d       	ldd	r22, Y+25	; 0x19
    25c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9c 8b       	std	Y+20, r25	; 0x14
    25ea:	8b 8b       	std	Y+19, r24	; 0x13
    25ec:	0f c0       	rjmp	.+30     	; 0x260c <LCD_EnClock+0xce>
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9a 8b       	std	Y+18, r25	; 0x12
    25f4:	89 8b       	std	Y+17, r24	; 0x11
    25f6:	89 89       	ldd	r24, Y+17	; 0x11
    25f8:	9a 89       	ldd	r25, Y+18	; 0x12
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_EnClock+0xbc>
    25fe:	9a 8b       	std	Y+18, r25	; 0x12
    2600:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	8b 89       	ldd	r24, Y+19	; 0x13
    2604:	9c 89       	ldd	r25, Y+20	; 0x14
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	9c 8b       	std	Y+20, r25	; 0x14
    260a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	69 f7       	brne	.-38     	; 0x25ee <LCD_EnClock+0xb0>
    2614:	14 c0       	rjmp	.+40     	; 0x263e <LCD_EnClock+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9c 8b       	std	Y+20, r25	; 0x14
    2628:	8b 8b       	std	Y+19, r24	; 0x13
    262a:	8b 89       	ldd	r24, Y+19	; 0x13
    262c:	9c 89       	ldd	r25, Y+20	; 0x14
    262e:	98 8b       	std	Y+16, r25	; 0x10
    2630:	8f 87       	std	Y+15, r24	; 0x0f
    2632:	8f 85       	ldd	r24, Y+15	; 0x0f
    2634:	98 89       	ldd	r25, Y+16	; 0x10
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_EnClock+0xf8>
    263a:	98 8b       	std	Y+16, r25	; 0x10
    263c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_WritePin(EN,LOW);
    263e:	81 e1       	ldi	r24, 0x11	; 17
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e8       	ldi	r26, 0x80	; 128
    264c:	bf e3       	ldi	r27, 0x3F	; 63
    264e:	8b 87       	std	Y+11, r24	; 0x0b
    2650:	9c 87       	std	Y+12, r25	; 0x0c
    2652:	ad 87       	std	Y+13, r26	; 0x0d
    2654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	6b 85       	ldd	r22, Y+11	; 0x0b
    2658:	7c 85       	ldd	r23, Y+12	; 0x0c
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	9e 85       	ldd	r25, Y+14	; 0x0e
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a ef       	ldi	r20, 0xFA	; 250
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8f 83       	std	Y+7, r24	; 0x07
    2670:	98 87       	std	Y+8, r25	; 0x08
    2672:	a9 87       	std	Y+9, r26	; 0x09
    2674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <LCD_EnClock+0x15a>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <LCD_EnClock+0x1d8>
	else if (__tmp > 65535)
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <LCD_EnClock+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <LCD_EnClock+0x1ba>
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_EnClock+0x1a8>
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <LCD_EnClock+0x19c>
    2700:	14 c0       	rjmp	.+40     	; 0x272a <LCD_EnClock+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_EnClock+0x1e4>
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
}
    272a:	6c 96       	adiw	r28, 0x1c	; 28
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LCD_Init>:
	///// END

#elif LCD_MODE ==_4_BIT

	/*LCD INST*/
	void LCD_Init(){
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	6c 97       	sbiw	r28, 0x1c	; 28
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a8 e4       	ldi	r26, 0x48	; 72
    2756:	b2 e4       	ldi	r27, 0x42	; 66
    2758:	89 8f       	std	Y+25, r24	; 0x19
    275a:	9a 8f       	std	Y+26, r25	; 0x1a
    275c:	ab 8f       	std	Y+27, r26	; 0x1b
    275e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	69 8d       	ldd	r22, Y+25	; 0x19
    2762:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2766:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a ef       	ldi	r20, 0xFA	; 250
    276e:	54 e4       	ldi	r21, 0x44	; 68
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8d 8b       	std	Y+21, r24	; 0x15
    277a:	9e 8b       	std	Y+22, r25	; 0x16
    277c:	af 8b       	std	Y+23, r26	; 0x17
    277e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <LCD_Init+0x66>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9c 8b       	std	Y+20, r25	; 0x14
    279e:	8b 8b       	std	Y+19, r24	; 0x13
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    27a2:	6d 89       	ldd	r22, Y+21	; 0x15
    27a4:	7e 89       	ldd	r23, Y+22	; 0x16
    27a6:	8f 89       	ldd	r24, Y+23	; 0x17
    27a8:	98 8d       	ldd	r25, Y+24	; 0x18
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	57 e4       	ldi	r21, 0x47	; 71
    27b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	4c f5       	brge	.+82     	; 0x280c <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	69 8d       	ldd	r22, Y+25	; 0x19
    27bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9c 8b       	std	Y+20, r25	; 0x14
    27e0:	8b 8b       	std	Y+19, r24	; 0x13
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <LCD_Init+0xc6>
    27e4:	88 ec       	ldi	r24, 0xC8	; 200
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9a 8b       	std	Y+18, r25	; 0x12
    27ea:	89 8b       	std	Y+17, r24	; 0x11
    27ec:	89 89       	ldd	r24, Y+17	; 0x11
    27ee:	9a 89       	ldd	r25, Y+18	; 0x12
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <LCD_Init+0xb4>
    27f4:	9a 8b       	std	Y+18, r25	; 0x12
    27f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	8b 89       	ldd	r24, Y+19	; 0x13
    27fa:	9c 89       	ldd	r25, Y+20	; 0x14
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	9c 8b       	std	Y+20, r25	; 0x14
    2800:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	8b 89       	ldd	r24, Y+19	; 0x13
    2804:	9c 89       	ldd	r25, Y+20	; 0x14
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	69 f7       	brne	.-38     	; 0x27e4 <LCD_Init+0xa8>
    280a:	14 c0       	rjmp	.+40     	; 0x2834 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	6d 89       	ldd	r22, Y+21	; 0x15
    280e:	7e 89       	ldd	r23, Y+22	; 0x16
    2810:	8f 89       	ldd	r24, Y+23	; 0x17
    2812:	98 8d       	ldd	r25, Y+24	; 0x18
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9c 8b       	std	Y+20, r25	; 0x14
    281e:	8b 8b       	std	Y+19, r24	; 0x13
    2820:	8b 89       	ldd	r24, Y+19	; 0x13
    2822:	9c 89       	ldd	r25, Y+20	; 0x14
    2824:	98 8b       	std	Y+16, r25	; 0x10
    2826:	8f 87       	std	Y+15, r24	; 0x0f
    2828:	8f 85       	ldd	r24, Y+15	; 0x0f
    282a:	98 89       	ldd	r25, Y+16	; 0x10
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <LCD_Init+0xf0>
    2830:	98 8b       	std	Y+16, r25	; 0x10
    2832:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		//INS FOR 4 BIT DIFFRENCE IN THIS LINE MUST SEND 02 THEN 28
		WriteIns(0x02);
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
		WriteIns(0x28);//5*7 2 lines
    283a:	88 e2       	ldi	r24, 0x28	; 40
    283c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
		WriteIns(0x0c);//0x0c,0x0e,0x0f cursor
    2840:	8c e0       	ldi	r24, 0x0C	; 12
    2842:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
		WriteIns(0x01);//clear screen
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e8       	ldi	r26, 0x80	; 128
    2852:	bf e3       	ldi	r27, 0x3F	; 63
    2854:	8b 87       	std	Y+11, r24	; 0x0b
    2856:	9c 87       	std	Y+12, r25	; 0x0c
    2858:	ad 87       	std	Y+13, r26	; 0x0d
    285a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	6b 85       	ldd	r22, Y+11	; 0x0b
    285e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2860:	8d 85       	ldd	r24, Y+13	; 0x0d
    2862:	9e 85       	ldd	r25, Y+14	; 0x0e
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a ef       	ldi	r20, 0xFA	; 250
    286a:	54 e4       	ldi	r21, 0x44	; 68
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8f 83       	std	Y+7, r24	; 0x07
    2876:	98 87       	std	Y+8, r25	; 0x08
    2878:	a9 87       	std	Y+9, r26	; 0x09
    287a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <LCD_Init+0x162>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9e 83       	std	Y+6, r25	; 0x06
    289a:	8d 83       	std	Y+5, r24	; 0x05
    289c:	3f c0       	rjmp	.+126    	; 0x291c <LCD_Init+0x1e0>
	else if (__tmp > 65535)
    289e:	6f 81       	ldd	r22, Y+7	; 0x07
    28a0:	78 85       	ldd	r23, Y+8	; 0x08
    28a2:	89 85       	ldd	r24, Y+9	; 0x09
    28a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	4c f5       	brge	.+82     	; 0x2908 <LCD_Init+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    28bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <LCD_Init+0x1c2>
    28e0:	88 ec       	ldi	r24, 0xC8	; 200
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_Init+0x1b0>
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	9e 81       	ldd	r25, Y+6	; 0x06
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f7       	brne	.-38     	; 0x28e0 <LCD_Init+0x1a4>
    2906:	14 c0       	rjmp	.+40     	; 0x2930 <LCD_Init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9e 83       	std	Y+6, r25	; 0x06
    291a:	8d 83       	std	Y+5, r24	; 0x05
    291c:	8d 81       	ldd	r24, Y+5	; 0x05
    291e:	9e 81       	ldd	r25, Y+6	; 0x06
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <LCD_Init+0x1ec>
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		WriteIns(0x06);// increment DDRAM address, NO SHIFT , WRITE ENGLISH
    2930:	86 e0       	ldi	r24, 0x06	; 6
    2932:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
		//WriteIns(0x04);// TO WRITE ARABIC
	}
    2936:	6c 96       	adiw	r28, 0x1c	; 28
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <LCD_SetData>:
	/*HELP TO SET DATA FOR ANY PIN*/
	void  LCD_SetData(u8 data){
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <LCD_SetData+0x6>
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	8a 83       	std	Y+2, r24	; 0x02
		for (u8 i=0;i<4;i++)
    2954:	19 82       	std	Y+1, r1	; 0x01
    2956:	1d c0       	rjmp	.+58     	; 0x2992 <LCD_SetData+0x4a>
		{
			DIO_WritePin(LCD_4BITArray[i],(DIO_PinVoltage_type)READ_BIT(data,i));
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	fc 01       	movw	r30, r24
    2960:	ee 5d       	subi	r30, 0xDE	; 222
    2962:	fe 4f       	sbci	r31, 0xFE	; 254
    2964:	40 81       	ld	r20, Z
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	b9 01       	movw	r22, r18
    2974:	02 c0       	rjmp	.+4      	; 0x297a <LCD_SetData+0x32>
    2976:	75 95       	asr	r23
    2978:	67 95       	ror	r22
    297a:	8a 95       	dec	r24
    297c:	e2 f7       	brpl	.-8      	; 0x2976 <LCD_SetData+0x2e>
    297e:	cb 01       	movw	r24, r22
    2980:	98 2f       	mov	r25, r24
    2982:	91 70       	andi	r25, 0x01	; 1
    2984:	84 2f       	mov	r24, r20
    2986:	69 2f       	mov	r22, r25
    2988:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
		WriteIns(0x06);// increment DDRAM address, NO SHIFT , WRITE ENGLISH
		//WriteIns(0x04);// TO WRITE ARABIC
	}
	/*HELP TO SET DATA FOR ANY PIN*/
	void  LCD_SetData(u8 data){
		for (u8 i=0;i<4;i++)
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	8f 5f       	subi	r24, 0xFF	; 255
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	84 30       	cpi	r24, 0x04	; 4
    2996:	00 f3       	brcs	.-64     	; 0x2958 <LCD_SetData+0x10>
		{
			DIO_WritePin(LCD_4BITArray[i],(DIO_PinVoltage_type)READ_BIT(data,i));
		}
	}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <WriteIns>:
	/*PRIVATE TO WRITE ANY INSTRUCTION*/
	void WriteIns(u8 ins){
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	0f 92       	push	r0
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	89 83       	std	Y+1, r24	; 0x01
		//RS FOR INST 0 AND FOR SEND DATA 1
		DIO_WritePin(RS,LOW);
    29ae:	80 e1       	ldi	r24, 0x10	; 16
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
		//INS == INSTRUCTION MUST SEND
		LCD_SetData(ins>>4);
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	82 95       	swap	r24
    29ba:	8f 70       	andi	r24, 0x0F	; 15
    29bc:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_SetData>
		//enable import to make micro in LCD received data send
		LCD_EnClock();
    29c0:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_EnClock>
		LCD_SetData(ins);
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_SetData>
		LCD_EnClock();
    29ca:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_EnClock>
	}
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <WriteData>:
	/*PRIVATE TO WRITE ANY DATA*/
	void WriteData(u8 data){
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	0f 92       	push	r0
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	89 83       	std	Y+1, r24	; 0x01
		//RS FOR INST 0 AND FOR SEND DATA 1
		DIO_WritePin(RS,HIGH);
    29e2:	80 e1       	ldi	r24, 0x10	; 16
    29e4:	61 e0       	ldi	r22, 0x01	; 1
    29e6:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
		//SEND DATA
		LCD_SetData(data>>4);
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	82 95       	swap	r24
    29ee:	8f 70       	andi	r24, 0x0F	; 15
    29f0:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_SetData>
		//enable import to make micro in LCD received data send
		LCD_EnClock();
    29f4:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_EnClock>
		LCD_SetData(data);
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_SetData>
		LCD_EnClock();
    29fe:	0e 94 9f 12 	call	0x253e	; 0x253e <LCD_EnClock>
	}
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <LCD_WriteChar>:

#endif


/*MUST SEND ADDRESS IN DDRAM AFTER USE THIS FUNCTION*/
void LCD_WriteChar(u8 ch){
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	0f 92       	push	r0
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	89 83       	std	Y+1, r24	; 0x01
	WriteData(ch);
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <WriteData>
}
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <LCD_WriteString>:


/*#define   NULLPTR  ((void*)0)*/
void LCD_WriteString(u8 str[])
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <LCD_WriteString+0x6>
    2a2a:	0f 92       	push	r0
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	9b 83       	std	Y+3, r25	; 0x03
    2a32:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for (i=0;str[i];i++)
    2a34:	19 82       	std	Y+1, r1	; 0x01
    2a36:	0e c0       	rjmp	.+28     	; 0x2a54 <LCD_WriteString+0x30>
	{
		LCD_WriteChar(str[i]);
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	9b 81       	ldd	r25, Y+3	; 0x03
    2a42:	fc 01       	movw	r30, r24
    2a44:	e2 0f       	add	r30, r18
    2a46:	f3 1f       	adc	r31, r19
    2a48:	80 81       	ld	r24, Z
    2a4a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>

/*#define   NULLPTR  ((void*)0)*/
void LCD_WriteString(u8 str[])
{
	u8 i;
	for (i=0;str[i];i++)
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	8f 5f       	subi	r24, 0xFF	; 255
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5e:	fc 01       	movw	r30, r24
    2a60:	e2 0f       	add	r30, r18
    2a62:	f3 1f       	adc	r31, r19
    2a64:	80 81       	ld	r24, Z
    2a66:	88 23       	and	r24, r24
    2a68:	39 f7       	brne	.-50     	; 0x2a38 <LCD_WriteString+0x14>
	{
		LCD_WriteChar(str[i]);
	}

}
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <LCD_SetCursor>:

// WRITE DDRAM
void LCD_SetCursor(u8 line,u8 cell)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <LCD_SetCursor+0x6>
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	6a 83       	std	Y+2, r22	; 0x02
	if (line==0)
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	88 23       	and	r24, r24
    2a88:	29 f4       	brne	.+10     	; 0x2a94 <LCD_SetCursor+0x1e>
	{
		WriteIns(0x80|cell); // 0x80 include necessary to write in DDRAM
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	80 68       	ori	r24, 0x80	; 128
    2a8e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
    2a92:	07 c0       	rjmp	.+14     	; 0x2aa2 <LCD_SetCursor+0x2c>
	}
	else if (line ==1)
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	21 f4       	brne	.+8      	; 0x2aa2 <LCD_SetCursor+0x2c>
	{
		//LINE TWO START FROM 0X40
		WriteIns(0x80+0x40+cell); //OR CAN DO PROBLEM IF TWO ONE THE SAME POSITION
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	80 54       	subi	r24, 0x40	; 64
    2a9e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
	}

}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <LCD_Clear>:

void LCD_Clear(void)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	2e 97       	sbiw	r28, 0x0e	; 14
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
	//0X01 INST CLEAR
	WriteIns(0x01);
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e8       	ldi	r26, 0x80	; 128
    2acc:	bf e3       	ldi	r27, 0x3F	; 63
    2ace:	8b 87       	std	Y+11, r24	; 0x0b
    2ad0:	9c 87       	std	Y+12, r25	; 0x0c
    2ad2:	ad 87       	std	Y+13, r26	; 0x0d
    2ad4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    2adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a ef       	ldi	r20, 0xFA	; 250
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	8f 83       	std	Y+7, r24	; 0x07
    2af0:	98 87       	std	Y+8, r25	; 0x08
    2af2:	a9 87       	std	Y+9, r26	; 0x09
    2af4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af6:	6f 81       	ldd	r22, Y+7	; 0x07
    2af8:	78 85       	ldd	r23, Y+8	; 0x08
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <LCD_Clear+0x6c>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9e 83       	std	Y+6, r25	; 0x06
    2b14:	8d 83       	std	Y+5, r24	; 0x05
    2b16:	3f c0       	rjmp	.+126    	; 0x2b96 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2b18:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1a:	78 85       	ldd	r23, Y+8	; 0x08
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	4c f5       	brge	.+82     	; 0x2b82 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9e 83       	std	Y+6, r25	; 0x06
    2b56:	8d 83       	std	Y+5, r24	; 0x05
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <LCD_Clear+0xcc>
    2b5a:	88 ec       	ldi	r24, 0xC8	; 200
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	9c 81       	ldd	r25, Y+4	; 0x04
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <LCD_Clear+0xba>
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	69 f7       	brne	.-38     	; 0x2b5a <LCD_Clear+0xae>
    2b80:	14 c0       	rjmp	.+40     	; 0x2baa <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	6f 81       	ldd	r22, Y+7	; 0x07
    2b84:	78 85       	ldd	r23, Y+8	; 0x08
    2b86:	89 85       	ldd	r24, Y+9	; 0x09
    2b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_Clear+0xf6>
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
	//MUST WAIT DELAY FOR THIS INSTRUCTION
	_delay_ms(1);
}
    2baa:	2e 96       	adiw	r28, 0x0e	; 14
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <LCD_WriteNumber>:

void LCD_WriteNumber(s32 num)
{
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	e8 97       	sbiw	r28, 0x38	; 56
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	6d ab       	std	Y+53, r22	; 0x35
    2bd6:	7e ab       	std	Y+54, r23	; 0x36
    2bd8:	8f ab       	std	Y+55, r24	; 0x37
    2bda:	98 af       	std	Y+56, r25	; 0x38
	u8 str[50],i=0,j;
    2bdc:	1a 82       	std	Y+2, r1	; 0x02
	if (num==0)
    2bde:	8d a9       	ldd	r24, Y+53	; 0x35
    2be0:	9e a9       	ldd	r25, Y+54	; 0x36
    2be2:	af a9       	ldd	r26, Y+55	; 0x37
    2be4:	b8 ad       	ldd	r27, Y+56	; 0x38
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	a1 05       	cpc	r26, r1
    2bea:	b1 05       	cpc	r27, r1
    2bec:	21 f4       	brne	.+8      	; 0x2bf6 <LCD_WriteNumber+0x3a>
	{
		LCD_WriteChar('0');
    2bee:	80 e3       	ldi	r24, 0x30	; 48
    2bf0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
    2bf4:	67 c0       	rjmp	.+206    	; 0x2cc4 <LCD_WriteNumber+0x108>
		return;
	}
	if (num<0)
    2bf6:	8d a9       	ldd	r24, Y+53	; 0x35
    2bf8:	9e a9       	ldd	r25, Y+54	; 0x36
    2bfa:	af a9       	ldd	r26, Y+55	; 0x37
    2bfc:	b8 ad       	ldd	r27, Y+56	; 0x38
    2bfe:	bb 23       	and	r27, r27
    2c00:	0c f0       	brlt	.+2      	; 0x2c04 <LCD_WriteNumber+0x48>
    2c02:	41 c0       	rjmp	.+130    	; 0x2c86 <LCD_WriteNumber+0xca>
	{
		num=num*(-1);
    2c04:	8d a9       	ldd	r24, Y+53	; 0x35
    2c06:	9e a9       	ldd	r25, Y+54	; 0x36
    2c08:	af a9       	ldd	r26, Y+55	; 0x37
    2c0a:	b8 ad       	ldd	r27, Y+56	; 0x38
    2c0c:	b0 95       	com	r27
    2c0e:	a0 95       	com	r26
    2c10:	90 95       	com	r25
    2c12:	81 95       	neg	r24
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	af 4f       	sbci	r26, 0xFF	; 255
    2c18:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1a:	8d ab       	std	Y+53, r24	; 0x35
    2c1c:	9e ab       	std	Y+54, r25	; 0x36
    2c1e:	af ab       	std	Y+55, r26	; 0x37
    2c20:	b8 af       	std	Y+56, r27	; 0x38
		LCD_WriteChar('-');
    2c22:	8d e2       	ldi	r24, 0x2D	; 45
    2c24:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
    2c28:	2e c0       	rjmp	.+92     	; 0x2c86 <LCD_WriteNumber+0xca>
	}

	while(num)
	{
		str[i]=num%10 +'0';
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	08 2f       	mov	r16, r24
    2c2e:	10 e0       	ldi	r17, 0x00	; 0
    2c30:	8d a9       	ldd	r24, Y+53	; 0x35
    2c32:	9e a9       	ldd	r25, Y+54	; 0x36
    2c34:	af a9       	ldd	r26, Y+55	; 0x37
    2c36:	b8 ad       	ldd	r27, Y+56	; 0x38
    2c38:	2a e0       	ldi	r18, 0x0A	; 10
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__divmodsi4>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	20 5d       	subi	r18, 0xD0	; 208
    2c50:	ce 01       	movw	r24, r28
    2c52:	03 96       	adiw	r24, 0x03	; 3
    2c54:	fc 01       	movw	r30, r24
    2c56:	e0 0f       	add	r30, r16
    2c58:	f1 1f       	adc	r31, r17
    2c5a:	20 83       	st	Z, r18
		i++;
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	8a 83       	std	Y+2, r24	; 0x02
		num=num/10;
    2c62:	8d a9       	ldd	r24, Y+53	; 0x35
    2c64:	9e a9       	ldd	r25, Y+54	; 0x36
    2c66:	af a9       	ldd	r26, Y+55	; 0x37
    2c68:	b8 ad       	ldd	r27, Y+56	; 0x38
    2c6a:	2a e0       	ldi	r18, 0x0A	; 10
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__divmodsi4>
    2c7a:	da 01       	movw	r26, r20
    2c7c:	c9 01       	movw	r24, r18
    2c7e:	8d ab       	std	Y+53, r24	; 0x35
    2c80:	9e ab       	std	Y+54, r25	; 0x36
    2c82:	af ab       	std	Y+55, r26	; 0x37
    2c84:	b8 af       	std	Y+56, r27	; 0x38
	{
		num=num*(-1);
		LCD_WriteChar('-');
	}

	while(num)
    2c86:	8d a9       	ldd	r24, Y+53	; 0x35
    2c88:	9e a9       	ldd	r25, Y+54	; 0x36
    2c8a:	af a9       	ldd	r26, Y+55	; 0x37
    2c8c:	b8 ad       	ldd	r27, Y+56	; 0x38
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	a1 05       	cpc	r26, r1
    2c92:	b1 05       	cpc	r27, r1
    2c94:	51 f6       	brne	.-108    	; 0x2c2a <LCD_WriteNumber+0x6e>
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	/*from I=J DUE IT STRING IS REVERSE*/
	for (j=i;j>0;j--)
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	11 c0       	rjmp	.+34     	; 0x2cbe <LCD_WriteNumber+0x102>
	{
		LCD_WriteChar(str[j-1]);
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	88 2f       	mov	r24, r24
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9c 01       	movw	r18, r24
    2ca4:	21 50       	subi	r18, 0x01	; 1
    2ca6:	30 40       	sbci	r19, 0x00	; 0
    2ca8:	ce 01       	movw	r24, r28
    2caa:	03 96       	adiw	r24, 0x03	; 3
    2cac:	fc 01       	movw	r30, r24
    2cae:	e2 0f       	add	r30, r18
    2cb0:	f3 1f       	adc	r31, r19
    2cb2:	80 81       	ld	r24, Z
    2cb4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
		str[i]=num%10 +'0';
		i++;
		num=num/10;
	}
	/*from I=J DUE IT STRING IS REVERSE*/
	for (j=i;j>0;j--)
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	81 50       	subi	r24, 0x01	; 1
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	88 23       	and	r24, r24
    2cc2:	61 f7       	brne	.-40     	; 0x2c9c <LCD_WriteNumber+0xe0>
	{
		LCD_WriteChar(str[j-1]);
	}

}
    2cc4:	e8 96       	adiw	r28, 0x38	; 56
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	08 95       	ret

00002cda <LCD_WriteBinary>:


void LCD_WriteBinary(u8 num)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <LCD_WriteBinary+0x6>
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	for (i=7;i>=0;i--)
    2ce6:	87 e0       	ldi	r24, 0x07	; 7
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	15 c0       	rjmp	.+42     	; 0x2d16 <LCD_WriteBinary+0x3c>
	{
		LCD_WriteChar(READ_BIT(num,i)+'0');
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	99 27       	eor	r25, r25
    2cf6:	87 fd       	sbrc	r24, 7
    2cf8:	90 95       	com	r25
    2cfa:	a9 01       	movw	r20, r18
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <LCD_WriteBinary+0x28>
    2cfe:	55 95       	asr	r21
    2d00:	47 95       	ror	r20
    2d02:	8a 95       	dec	r24
    2d04:	e2 f7       	brpl	.-8      	; 0x2cfe <LCD_WriteBinary+0x24>
    2d06:	ca 01       	movw	r24, r20
    2d08:	81 70       	andi	r24, 0x01	; 1
    2d0a:	80 5d       	subi	r24, 0xD0	; 208
    2d0c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>


void LCD_WriteBinary(u8 num)
{
	s8 i;
	for (i=7;i>=0;i--)
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	81 50       	subi	r24, 0x01	; 1
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	88 23       	and	r24, r24
    2d1a:	44 f7       	brge	.-48     	; 0x2cec <LCD_WriteBinary+0x12>
	{
		LCD_WriteChar(READ_BIT(num,i)+'0');
	}
}
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <LCD_ClearLoc>:

void LCD_ClearLoc(u8 line ,u8 cell,u8 num)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <LCD_ClearLoc+0x6>
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <LCD_ClearLoc+0x8>
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	8a 83       	std	Y+2, r24	; 0x02
    2d34:	6b 83       	std	Y+3, r22	; 0x03
    2d36:	4c 83       	std	Y+4, r20	; 0x04
	u8 i;
	LCD_SetCursor(line,cell);
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d3c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
	for (i=0;i<num;i++)
    2d40:	19 82       	std	Y+1, r1	; 0x01
    2d42:	06 c0       	rjmp	.+12     	; 0x2d50 <LCD_ClearLoc+0x2a>
	{
		LCD_WriteChar(' ');
    2d44:	80 e2       	ldi	r24, 0x20	; 32
    2d46:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>

void LCD_ClearLoc(u8 line ,u8 cell,u8 num)
{
	u8 i;
	LCD_SetCursor(line,cell);
	for (i=0;i<num;i++)
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	99 81       	ldd	r25, Y+1	; 0x01
    2d52:	8c 81       	ldd	r24, Y+4	; 0x04
    2d54:	98 17       	cp	r25, r24
    2d56:	b0 f3       	brcs	.-20     	; 0x2d44 <LCD_ClearLoc+0x1e>
	{
		LCD_WriteChar(' ');
	}

}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <LCD_WriteNumber_4D>:

void LCD_WriteNumber_4D(u16 num)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <LCD_WriteNumber_4D+0x6>
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	9a 83       	std	Y+2, r25	; 0x02
    2d72:	89 83       	std	Y+1, r24	; 0x01
	//LCD_WriteChar(((num%100000)/10000)+'0');
	LCD_WriteChar(((num%10000)/1000)+'0');
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	20 e1       	ldi	r18, 0x10	; 16
    2d7a:	37 e2       	ldi	r19, 0x27	; 39
    2d7c:	b9 01       	movw	r22, r18
    2d7e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    2d82:	28 ee       	ldi	r18, 0xE8	; 232
    2d84:	33 e0       	ldi	r19, 0x03	; 3
    2d86:	b9 01       	movw	r22, r18
    2d88:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	80 5d       	subi	r24, 0xD0	; 208
    2d90:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
	LCD_WriteChar(((num%1000)/100)+'0');
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	28 ee       	ldi	r18, 0xE8	; 232
    2d9a:	33 e0       	ldi	r19, 0x03	; 3
    2d9c:	b9 01       	movw	r22, r18
    2d9e:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    2da2:	24 e6       	ldi	r18, 0x64	; 100
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	b9 01       	movw	r22, r18
    2da8:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    2dac:	cb 01       	movw	r24, r22
    2dae:	80 5d       	subi	r24, 0xD0	; 208
    2db0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
	LCD_WriteChar(((num%100)/10)+'0');
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	9a 81       	ldd	r25, Y+2	; 0x02
    2db8:	24 e6       	ldi	r18, 0x64	; 100
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	b9 01       	movw	r22, r18
    2dbe:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    2dc2:	2a e0       	ldi	r18, 0x0A	; 10
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	b9 01       	movw	r22, r18
    2dc8:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    2dcc:	cb 01       	movw	r24, r22
    2dce:	80 5d       	subi	r24, 0xD0	; 208
    2dd0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
	LCD_WriteChar(((num%10)/1)+'0');
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	2a e0       	ldi	r18, 0x0A	; 10
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	b9 01       	movw	r22, r18
    2dde:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    2de2:	80 5d       	subi	r24, 0xD0	; 208
    2de4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
}
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <LCD_CustomChar>:

//WRITE IN CGRAM BUT NOT PRINT IF YOU NEED PRINT CALL WriteChar(loc)
void LCD_CustomChar(u8 loc,u8*pattern)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <LCD_CustomChar+0x6>
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <LCD_CustomChar+0x8>
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	8a 83       	std	Y+2, r24	; 0x02
    2e00:	7c 83       	std	Y+4, r23	; 0x04
    2e02:	6b 83       	std	Y+3, r22	; 0x03
	WriteIns(0x40+loc*8);
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	88 2f       	mov	r24, r24
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	08 96       	adiw	r24, 0x08	; 8
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
	for(u8 i=0;i<8;i++)
    2e1c:	19 82       	std	Y+1, r1	; 0x01
    2e1e:	0e c0       	rjmp	.+28     	; 0x2e3c <LCD_CustomChar+0x4a>
	{
		WriteData(pattern[i]);
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	e2 0f       	add	r30, r18
    2e2e:	f3 1f       	adc	r31, r19
    2e30:	80 81       	ld	r24, Z
    2e32:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <WriteData>

//WRITE IN CGRAM BUT NOT PRINT IF YOU NEED PRINT CALL WriteChar(loc)
void LCD_CustomChar(u8 loc,u8*pattern)
{
	WriteIns(0x40+loc*8);
	for(u8 i=0;i<8;i++)
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	8f 5f       	subi	r24, 0xFF	; 255
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	88 30       	cpi	r24, 0x08	; 8
    2e40:	78 f3       	brcs	.-34     	; 0x2e20 <LCD_CustomChar+0x2e>
	{
		WriteData(pattern[i]);
	}
	// IMPORTENT TO RETRUN CURSOR TO DDRAM
	WriteIns(0x80);
    2e42:	80 e8       	ldi	r24, 0x80	; 128
    2e44:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <WriteIns>
}
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <LCD_StrLength>:

u8 LCD_StrLength(s32* str){
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <LCD_StrLength+0x6>
    2e5c:	0f 92       	push	r0
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	9b 83       	std	Y+3, r25	; 0x03
    2e64:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2e66:	19 82       	std	Y+1, r1	; 0x01
    2e68:	03 c0       	rjmp	.+6      	; 0x2e70 <LCD_StrLength+0x1a>
	while (str[i])
	{
		i++;
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	8f 5f       	subi	r24, 0xFF	; 255
    2e6e:	89 83       	std	Y+1, r24	; 0x01
	WriteIns(0x80);
}

u8 LCD_StrLength(s32* str){
	u8 i=0;
	while (str[i])
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	88 2f       	mov	r24, r24
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	9c 01       	movw	r18, r24
    2e78:	22 0f       	add	r18, r18
    2e7a:	33 1f       	adc	r19, r19
    2e7c:	22 0f       	add	r18, r18
    2e7e:	33 1f       	adc	r19, r19
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	9b 81       	ldd	r25, Y+3	; 0x03
    2e84:	fc 01       	movw	r30, r24
    2e86:	e2 0f       	add	r30, r18
    2e88:	f3 1f       	adc	r31, r19
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e90:	b3 81       	ldd	r27, Z+3	; 0x03
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	a1 05       	cpc	r26, r1
    2e96:	b1 05       	cpc	r27, r1
    2e98:	41 f7       	brne	.-48     	; 0x2e6a <LCD_StrLength+0x14>
	{
		i++;
	}
	return i;
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <LCD_WriteHex>:

void LCD_WriteHex(u8 num){
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	2c 97       	sbiw	r28, 0x0c	; 12
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	8c 87       	std	Y+12, r24	; 0x0c
	s8 i;
	u8 str[8];
	u8 c1,c2;
	for (i=7;i>=0;i--)
    2ebe:	87 e0       	ldi	r24, 0x07	; 7
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
    2ec2:	1e c0       	rjmp	.+60     	; 0x2f00 <LCD_WriteHex+0x58>
	{
		str[i]=(READ_BIT(num,i));
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	48 2f       	mov	r20, r24
    2ec8:	55 27       	eor	r21, r21
    2eca:	47 fd       	sbrc	r20, 7
    2ecc:	50 95       	com	r21
    2ece:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	99 27       	eor	r25, r25
    2ed8:	87 fd       	sbrc	r24, 7
    2eda:	90 95       	com	r25
    2edc:	b9 01       	movw	r22, r18
    2ede:	02 c0       	rjmp	.+4      	; 0x2ee4 <LCD_WriteHex+0x3c>
    2ee0:	75 95       	asr	r23
    2ee2:	67 95       	ror	r22
    2ee4:	8a 95       	dec	r24
    2ee6:	e2 f7       	brpl	.-8      	; 0x2ee0 <LCD_WriteHex+0x38>
    2ee8:	cb 01       	movw	r24, r22
    2eea:	28 2f       	mov	r18, r24
    2eec:	21 70       	andi	r18, 0x01	; 1
    2eee:	ce 01       	movw	r24, r28
    2ef0:	04 96       	adiw	r24, 0x04	; 4
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e4 0f       	add	r30, r20
    2ef6:	f5 1f       	adc	r31, r21
    2ef8:	20 83       	st	Z, r18

void LCD_WriteHex(u8 num){
	s8 i;
	u8 str[8];
	u8 c1,c2;
	for (i=7;i>=0;i--)
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	81 50       	subi	r24, 0x01	; 1
    2efe:	8b 83       	std	Y+3, r24	; 0x03
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	88 23       	and	r24, r24
    2f04:	fc f6       	brge	.-66     	; 0x2ec4 <LCD_WriteHex+0x1c>
	{
		str[i]=(READ_BIT(num,i));
	}
	c1=str[4]*1+str[5]*2+str[6]*4+str[7]*8;
    2f06:	48 85       	ldd	r20, Y+8	; 0x08
    2f08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f10:	88 2f       	mov	r24, r24
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	82 0f       	add	r24, r18
    2f1a:	93 1f       	adc	r25, r19
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	22 0f       	add	r18, r18
    2f20:	33 1f       	adc	r19, r19
    2f22:	89 85       	ldd	r24, Y+9	; 0x09
    2f24:	88 2f       	mov	r24, r24
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	82 0f       	add	r24, r18
    2f2a:	93 1f       	adc	r25, r19
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	84 0f       	add	r24, r20
    2f32:	8a 83       	std	Y+2, r24	; 0x02
	c2=str[0]*1+str[1]*2+str[2]*4+str[3]*8;
    2f34:	4c 81       	ldd	r20, Y+4	; 0x04
    2f36:	8e 81       	ldd	r24, Y+6	; 0x06
    2f38:	28 2f       	mov	r18, r24
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f3e:	88 2f       	mov	r24, r24
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	82 0f       	add	r24, r18
    2f48:	93 1f       	adc	r25, r19
    2f4a:	9c 01       	movw	r18, r24
    2f4c:	22 0f       	add	r18, r18
    2f4e:	33 1f       	adc	r19, r19
    2f50:	8d 81       	ldd	r24, Y+5	; 0x05
    2f52:	88 2f       	mov	r24, r24
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	82 0f       	add	r24, r18
    2f58:	93 1f       	adc	r25, r19
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	84 0f       	add	r24, r20
    2f60:	89 83       	std	Y+1, r24	; 0x01
	(c1 >= 10)?LCD_WriteChar(c1+55):LCD_WriteNumber(c1);
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	8a 30       	cpi	r24, 0x0A	; 10
    2f66:	28 f0       	brcs	.+10     	; 0x2f72 <LCD_WriteHex+0xca>
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	89 5c       	subi	r24, 0xC9	; 201
    2f6c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
    2f70:	09 c0       	rjmp	.+18     	; 0x2f84 <LCD_WriteHex+0xdc>
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	88 2f       	mov	r24, r24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	a0 e0       	ldi	r26, 0x00	; 0
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
	(c2 >= 10)?LCD_WriteChar(c2+55):LCD_WriteNumber(c2);
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	8a 30       	cpi	r24, 0x0A	; 10
    2f88:	28 f0       	brcs	.+10     	; 0x2f94 <LCD_WriteHex+0xec>
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	89 5c       	subi	r24, 0xC9	; 201
    2f8e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
    2f92:	09 c0       	rjmp	.+18     	; 0x2fa6 <LCD_WriteHex+0xfe>
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	a0 e0       	ldi	r26, 0x00	; 0
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
}
    2fa6:	2c 96       	adiw	r28, 0x0c	; 12
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <KEYPAD_Init>:
#include "KEYPAD_Interface.h"



//FIRST STEP SET HIGH FOR ALL PIN
void KEYPAD_Init(){
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	0f 92       	push	r0
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
	for (u8 row = 0; row < ROWS;row++)
    2fc2:	19 82       	std	Y+1, r1	; 0x01
    2fc4:	0d c0       	rjmp	.+26     	; 0x2fe0 <KEYPAD_Init+0x28>
	{
		DIO_WritePin(KPD_ROWS[row],HIGH);
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	88 2f       	mov	r24, r24
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	fc 01       	movw	r30, r24
    2fce:	e7 5d       	subi	r30, 0xD7	; 215
    2fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd2:	80 81       	ld	r24, Z
    2fd4:	61 e0       	ldi	r22, 0x01	; 1
    2fd6:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>



//FIRST STEP SET HIGH FOR ALL PIN
void KEYPAD_Init(){
	for (u8 row = 0; row < ROWS;row++)
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	84 30       	cpi	r24, 0x04	; 4
    2fe4:	80 f3       	brcs	.-32     	; 0x2fc6 <KEYPAD_Init+0xe>
	{
		DIO_WritePin(KPD_ROWS[row],HIGH);
	}
}
    2fe6:	0f 90       	pop	r0
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <KEYPAD_GetKey>:

u8 KEYPAD_GetKey(){
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <KEYPAD_GetKey+0x6>
    2ff4:	0f 92       	push	r0
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
	u8 row,col,key='N';
    2ffa:	8e e4       	ldi	r24, 0x4E	; 78
    2ffc:	89 83       	std	Y+1, r24	; 0x01

	for(row=0;row<ROWS;row++){
    2ffe:	1b 82       	std	Y+3, r1	; 0x03
    3000:	47 c0       	rjmp	.+142    	; 0x3090 <KEYPAD_GetKey+0xa2>
		DIO_WritePin(KPD_ROWS[row],LOW);
    3002:	8b 81       	ldd	r24, Y+3	; 0x03
    3004:	88 2f       	mov	r24, r24
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	fc 01       	movw	r30, r24
    300a:	e7 5d       	subi	r30, 0xD7	; 215
    300c:	fe 4f       	sbci	r31, 0xFE	; 254
    300e:	80 81       	ld	r24, Z
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
		for(col=0;col<COLS;col++){
    3016:	1a 82       	std	Y+2, r1	; 0x02
    3018:	2b c0       	rjmp	.+86     	; 0x3070 <KEYPAD_GetKey+0x82>
			if(DIO_ReadPin(KPD_COLS[col]) == 0){
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	88 2f       	mov	r24, r24
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	fc 01       	movw	r30, r24
    3022:	ea 5d       	subi	r30, 0xDA	; 218
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	80 81       	ld	r24, Z
    3028:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_ReadPin>
    302c:	88 23       	and	r24, r24
    302e:	e9 f4       	brne	.+58     	; 0x306a <KEYPAD_GetKey+0x7c>
				key = Key_Array[row][col];
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	48 2f       	mov	r20, r24
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	c9 01       	movw	r24, r18
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	82 0f       	add	r24, r18
    3044:	93 1f       	adc	r25, r19
    3046:	84 0f       	add	r24, r20
    3048:	95 1f       	adc	r25, r21
    304a:	fc 01       	movw	r30, r24
    304c:	e2 5f       	subi	r30, 0xF2	; 242
    304e:	fe 4f       	sbci	r31, 0xFE	; 254
    3050:	80 81       	ld	r24, Z
    3052:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_ReadPin(KPD_COLS[col]) == LOW);
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	fc 01       	movw	r30, r24
    305c:	ea 5d       	subi	r30, 0xDA	; 218
    305e:	fe 4f       	sbci	r31, 0xFE	; 254
    3060:	80 81       	ld	r24, Z
    3062:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_ReadPin>
    3066:	88 23       	and	r24, r24
    3068:	a9 f3       	breq	.-22     	; 0x3054 <KEYPAD_GetKey+0x66>
u8 KEYPAD_GetKey(){
	u8 row,col,key='N';

	for(row=0;row<ROWS;row++){
		DIO_WritePin(KPD_ROWS[row],LOW);
		for(col=0;col<COLS;col++){
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	8f 5f       	subi	r24, 0xFF	; 255
    306e:	8a 83       	std	Y+2, r24	; 0x02
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	83 30       	cpi	r24, 0x03	; 3
    3074:	90 f2       	brcs	.-92     	; 0x301a <KEYPAD_GetKey+0x2c>
			if(DIO_ReadPin(KPD_COLS[col]) == 0){
				key = Key_Array[row][col];
				while(DIO_ReadPin(KPD_COLS[col]) == LOW);
			}
		}
		DIO_WritePin(KPD_ROWS[row],HIGH);
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	fc 01       	movw	r30, r24
    307e:	e7 5d       	subi	r30, 0xD7	; 215
    3080:	fe 4f       	sbci	r31, 0xFE	; 254
    3082:	80 81       	ld	r24, Z
    3084:	61 e0       	ldi	r22, 0x01	; 1
    3086:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
}

u8 KEYPAD_GetKey(){
	u8 row,col,key='N';

	for(row=0;row<ROWS;row++){
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	8f 5f       	subi	r24, 0xFF	; 255
    308e:	8b 83       	std	Y+3, r24	; 0x03
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	84 30       	cpi	r24, 0x04	; 4
    3094:	08 f4       	brcc	.+2      	; 0x3098 <KEYPAD_GetKey+0xaa>
    3096:	b5 cf       	rjmp	.-150    	; 0x3002 <KEYPAD_GetKey+0x14>
				while(DIO_ReadPin(KPD_COLS[col]) == LOW);
			}
		}
		DIO_WritePin(KPD_ROWS[row],HIGH);
	}
	return key;
    3098:	89 81       	ldd	r24, Y+1	; 0x01
}
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <Button_IsPressed>:
#include "../../SERVICES/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "BUTTON_Interface.h"


Button_Status Button_IsPressed(DIO_Pin_type pin){
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <Button_IsPressed+0x6>
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <Button_IsPressed+0x8>
    30ae:	0f 92       	push	r0
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	8b 83       	std	Y+3, r24	; 0x03
     Button_Status Button;
     DIO_PinStatus_type Status = DIO_ReadStatus_CfgPin(pin);
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <DIO_ReadStatus_CfgPin>
    30bc:	89 83       	std	Y+1, r24	; 0x01
	 switch(Status){
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	3d 83       	std	Y+5, r19	; 0x05
    30c6:	2c 83       	std	Y+4, r18	; 0x04
    30c8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ca:	9d 81       	ldd	r25, Y+5	; 0x05
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	91 05       	cpc	r25, r1
    30d0:	79 f0       	breq	.+30     	; 0x30f0 <Button_IsPressed+0x4a>
    30d2:	2c 81       	ldd	r18, Y+4	; 0x04
    30d4:	3d 81       	ldd	r19, Y+5	; 0x05
    30d6:	22 30       	cpi	r18, 0x02	; 2
    30d8:	31 05       	cpc	r19, r1
    30da:	99 f4       	brne	.+38     	; 0x3102 <Button_IsPressed+0x5c>
		 case  INPULL:
			 if(DIO_ReadPin(pin) == 0) {
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_ReadPin>
    30e2:	88 23       	and	r24, r24
    30e4:	19 f4       	brne	.+6      	; 0x30ec <Button_IsPressed+0x46>
				 Button = PRESSED;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	8a 83       	std	Y+2, r24	; 0x02
    30ea:	0b c0       	rjmp	.+22     	; 0x3102 <Button_IsPressed+0x5c>
			 }else{
				 Button = NOTPRESSED;
    30ec:	1a 82       	std	Y+2, r1	; 0x02
    30ee:	09 c0       	rjmp	.+18     	; 0x3102 <Button_IsPressed+0x5c>
			 }
		 break;
	     case INFREE:
			 if(DIO_ReadPin(pin) == 1){
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_ReadPin>
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	19 f4       	brne	.+6      	; 0x3100 <Button_IsPressed+0x5a>
				 Button = PRESSED;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	8a 83       	std	Y+2, r24	; 0x02
    30fe:	01 c0       	rjmp	.+2      	; 0x3102 <Button_IsPressed+0x5c>
			 }else{
				 Button = NOTPRESSED;
    3100:	1a 82       	std	Y+2, r1	; 0x02
			 }
		 break;
	     case OUTPUT:
	     break;
		 }
	 return Button;
    3102:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <FIRE_INIT>:
u8 press;
char password[5];
char check[5];
static u32 count = 0;

void FIRE_INIT(void){
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	af 97       	sbiw	r28, 0x2f	; 47
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61

	u8 key ='0';
    3128:	80 e3       	ldi	r24, 0x30	; 48
    312a:	8f a7       	std	Y+47, r24	; 0x2f
	int max = 0;
    312c:	1e a6       	std	Y+46, r1	; 0x2e
    312e:	1d a6       	std	Y+45, r1	; 0x2d
	LCD_SetCursor(0,0);
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	60 e0       	ldi	r22, 0x00	; 0
    3134:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
	LCD_WriteString("FIRE SYSTEM");
    3138:	80 e6       	ldi	r24, 0x60	; 96
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a8 e4       	ldi	r26, 0x48	; 72
    3146:	b3 e4       	ldi	r27, 0x43	; 67
    3148:	8f a3       	std	Y+39, r24	; 0x27
    314a:	98 a7       	std	Y+40, r25	; 0x28
    314c:	a9 a7       	std	Y+41, r26	; 0x29
    314e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3150:	6f a1       	ldd	r22, Y+39	; 0x27
    3152:	78 a5       	ldd	r23, Y+40	; 0x28
    3154:	89 a5       	ldd	r24, Y+41	; 0x29
    3156:	9a a5       	ldd	r25, Y+42	; 0x2a
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4a ef       	ldi	r20, 0xFA	; 250
    315e:	54 e4       	ldi	r21, 0x44	; 68
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	8b a3       	std	Y+35, r24	; 0x23
    316a:	9c a3       	std	Y+36, r25	; 0x24
    316c:	ad a3       	std	Y+37, r26	; 0x25
    316e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3170:	6b a1       	ldd	r22, Y+35	; 0x23
    3172:	7c a1       	ldd	r23, Y+36	; 0x24
    3174:	8d a1       	ldd	r24, Y+37	; 0x25
    3176:	9e a1       	ldd	r25, Y+38	; 0x26
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	2c f4       	brge	.+10     	; 0x3192 <FIRE_INIT+0x7e>
		__ticks = 1;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9a a3       	std	Y+34, r25	; 0x22
    318e:	89 a3       	std	Y+33, r24	; 0x21
    3190:	3f c0       	rjmp	.+126    	; 0x3210 <FIRE_INIT+0xfc>
	else if (__tmp > 65535)
    3192:	6b a1       	ldd	r22, Y+35	; 0x23
    3194:	7c a1       	ldd	r23, Y+36	; 0x24
    3196:	8d a1       	ldd	r24, Y+37	; 0x25
    3198:	9e a1       	ldd	r25, Y+38	; 0x26
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	3f ef       	ldi	r19, 0xFF	; 255
    319e:	4f e7       	ldi	r20, 0x7F	; 127
    31a0:	57 e4       	ldi	r21, 0x47	; 71
    31a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a6:	18 16       	cp	r1, r24
    31a8:	4c f5       	brge	.+82     	; 0x31fc <FIRE_INIT+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31aa:	6f a1       	ldd	r22, Y+39	; 0x27
    31ac:	78 a5       	ldd	r23, Y+40	; 0x28
    31ae:	89 a5       	ldd	r24, Y+41	; 0x29
    31b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e2       	ldi	r20, 0x20	; 32
    31b8:	51 e4       	ldi	r21, 0x41	; 65
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9a a3       	std	Y+34, r25	; 0x22
    31d0:	89 a3       	std	Y+33, r24	; 0x21
    31d2:	0f c0       	rjmp	.+30     	; 0x31f2 <FIRE_INIT+0xde>
    31d4:	88 ec       	ldi	r24, 0xC8	; 200
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	98 a3       	std	Y+32, r25	; 0x20
    31da:	8f 8f       	std	Y+31, r24	; 0x1f
    31dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31de:	98 a1       	ldd	r25, Y+32	; 0x20
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <FIRE_INIT+0xcc>
    31e4:	98 a3       	std	Y+32, r25	; 0x20
    31e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e8:	89 a1       	ldd	r24, Y+33	; 0x21
    31ea:	9a a1       	ldd	r25, Y+34	; 0x22
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	9a a3       	std	Y+34, r25	; 0x22
    31f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f2:	89 a1       	ldd	r24, Y+33	; 0x21
    31f4:	9a a1       	ldd	r25, Y+34	; 0x22
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	69 f7       	brne	.-38     	; 0x31d4 <FIRE_INIT+0xc0>
    31fa:	14 c0       	rjmp	.+40     	; 0x3224 <FIRE_INIT+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fc:	6b a1       	ldd	r22, Y+35	; 0x23
    31fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3200:	8d a1       	ldd	r24, Y+37	; 0x25
    3202:	9e a1       	ldd	r25, Y+38	; 0x26
    3204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	9a a3       	std	Y+34, r25	; 0x22
    320e:	89 a3       	std	Y+33, r24	; 0x21
    3210:	89 a1       	ldd	r24, Y+33	; 0x21
    3212:	9a a1       	ldd	r25, Y+34	; 0x22
    3214:	9e 8f       	std	Y+30, r25	; 0x1e
    3216:	8d 8f       	std	Y+29, r24	; 0x1d
    3218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    321a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <FIRE_INIT+0x108>
    3220:	9e 8f       	std	Y+30, r25	; 0x1e
    3222:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);

	for(signed int x = 15 ; x >= 0 ; x--){
    3224:	8f e0       	ldi	r24, 0x0F	; 15
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	9c a7       	std	Y+44, r25	; 0x2c
    322a:	8b a7       	std	Y+43, r24	; 0x2b
    322c:	7f c0       	rjmp	.+254    	; 0x332c <FIRE_INIT+0x218>
		LCD_SetCursor(0,x);
    322e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	69 2f       	mov	r22, r25
    3234:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
		LCD_WriteChar(' ');
    3238:	80 e2       	ldi	r24, 0x20	; 32
    323a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a0 e2       	ldi	r26, 0x20	; 32
    3244:	b2 e4       	ldi	r27, 0x42	; 66
    3246:	89 8f       	std	Y+25, r24	; 0x19
    3248:	9a 8f       	std	Y+26, r25	; 0x1a
    324a:	ab 8f       	std	Y+27, r26	; 0x1b
    324c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324e:	69 8d       	ldd	r22, Y+25	; 0x19
    3250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	4a ef       	ldi	r20, 0xFA	; 250
    325c:	54 e4       	ldi	r21, 0x44	; 68
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8d 8b       	std	Y+21, r24	; 0x15
    3268:	9e 8b       	std	Y+22, r25	; 0x16
    326a:	af 8b       	std	Y+23, r26	; 0x17
    326c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    326e:	6d 89       	ldd	r22, Y+21	; 0x15
    3270:	7e 89       	ldd	r23, Y+22	; 0x16
    3272:	8f 89       	ldd	r24, Y+23	; 0x17
    3274:	98 8d       	ldd	r25, Y+24	; 0x18
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e8       	ldi	r20, 0x80	; 128
    327c:	5f e3       	ldi	r21, 0x3F	; 63
    327e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3282:	88 23       	and	r24, r24
    3284:	2c f4       	brge	.+10     	; 0x3290 <FIRE_INIT+0x17c>
		__ticks = 1;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9c 8b       	std	Y+20, r25	; 0x14
    328c:	8b 8b       	std	Y+19, r24	; 0x13
    328e:	3f c0       	rjmp	.+126    	; 0x330e <FIRE_INIT+0x1fa>
	else if (__tmp > 65535)
    3290:	6d 89       	ldd	r22, Y+21	; 0x15
    3292:	7e 89       	ldd	r23, Y+22	; 0x16
    3294:	8f 89       	ldd	r24, Y+23	; 0x17
    3296:	98 8d       	ldd	r25, Y+24	; 0x18
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	3f ef       	ldi	r19, 0xFF	; 255
    329c:	4f e7       	ldi	r20, 0x7F	; 127
    329e:	57 e4       	ldi	r21, 0x47	; 71
    32a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a4:	18 16       	cp	r1, r24
    32a6:	4c f5       	brge	.+82     	; 0x32fa <FIRE_INIT+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a8:	69 8d       	ldd	r22, Y+25	; 0x19
    32aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e2       	ldi	r20, 0x20	; 32
    32b6:	51 e4       	ldi	r21, 0x41	; 65
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	bc 01       	movw	r22, r24
    32c2:	cd 01       	movw	r24, r26
    32c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	9c 8b       	std	Y+20, r25	; 0x14
    32ce:	8b 8b       	std	Y+19, r24	; 0x13
    32d0:	0f c0       	rjmp	.+30     	; 0x32f0 <FIRE_INIT+0x1dc>
    32d2:	88 ec       	ldi	r24, 0xC8	; 200
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9a 8b       	std	Y+18, r25	; 0x12
    32d8:	89 8b       	std	Y+17, r24	; 0x11
    32da:	89 89       	ldd	r24, Y+17	; 0x11
    32dc:	9a 89       	ldd	r25, Y+18	; 0x12
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <FIRE_INIT+0x1ca>
    32e2:	9a 8b       	std	Y+18, r25	; 0x12
    32e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e6:	8b 89       	ldd	r24, Y+19	; 0x13
    32e8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	9c 8b       	std	Y+20, r25	; 0x14
    32ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f0:	8b 89       	ldd	r24, Y+19	; 0x13
    32f2:	9c 89       	ldd	r25, Y+20	; 0x14
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	69 f7       	brne	.-38     	; 0x32d2 <FIRE_INIT+0x1be>
    32f8:	14 c0       	rjmp	.+40     	; 0x3322 <FIRE_INIT+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fa:	6d 89       	ldd	r22, Y+21	; 0x15
    32fc:	7e 89       	ldd	r23, Y+22	; 0x16
    32fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3300:	98 8d       	ldd	r25, Y+24	; 0x18
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9c 8b       	std	Y+20, r25	; 0x14
    330c:	8b 8b       	std	Y+19, r24	; 0x13
    330e:	8b 89       	ldd	r24, Y+19	; 0x13
    3310:	9c 89       	ldd	r25, Y+20	; 0x14
    3312:	98 8b       	std	Y+16, r25	; 0x10
    3314:	8f 87       	std	Y+15, r24	; 0x0f
    3316:	8f 85       	ldd	r24, Y+15	; 0x0f
    3318:	98 89       	ldd	r25, Y+16	; 0x10
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <FIRE_INIT+0x206>
    331e:	98 8b       	std	Y+16, r25	; 0x10
    3320:	8f 87       	std	Y+15, r24	; 0x0f
	int max = 0;
	LCD_SetCursor(0,0);
	LCD_WriteString("FIRE SYSTEM");
	_delay_ms(200);

	for(signed int x = 15 ; x >= 0 ; x--){
    3322:	8b a5       	ldd	r24, Y+43	; 0x2b
    3324:	9c a5       	ldd	r25, Y+44	; 0x2c
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	9c a7       	std	Y+44, r25	; 0x2c
    332a:	8b a7       	std	Y+43, r24	; 0x2b
    332c:	8b a5       	ldd	r24, Y+43	; 0x2b
    332e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3330:	99 23       	and	r25, r25
    3332:	0c f0       	brlt	.+2      	; 0x3336 <FIRE_INIT+0x222>
    3334:	7c cf       	rjmp	.-264    	; 0x322e <FIRE_INIT+0x11a>
		LCD_SetCursor(0,x);
		LCD_WriteChar(' ');
		_delay_ms(40);
	}
	LCD_SetCursor(0,0);
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
	LCD_WriteString("ENTER PASSWORD");
    333e:	8c e6       	ldi	r24, 0x6C	; 108
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>

	LCD_SetCursor(1,0);
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
    334e:	18 c0       	rjmp	.+48     	; 0x3380 <FIRE_INIT+0x26c>
	while(max < 5){

		key = KEYPAD_GetKey();
    3350:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_GetKey>
    3354:	8f a7       	std	Y+47, r24	; 0x2f
		if(key == '\n'){
    3356:	8f a5       	ldd	r24, Y+47	; 0x2f
    3358:	8a 30       	cpi	r24, 0x0A	; 10
    335a:	b9 f0       	breq	.+46     	; 0x338a <FIRE_INIT+0x276>
			break;

		}else{
			if(key != 'N'){
    335c:	8f a5       	ldd	r24, Y+47	; 0x2f
    335e:	8e 34       	cpi	r24, 0x4E	; 78
    3360:	79 f0       	breq	.+30     	; 0x3380 <FIRE_INIT+0x26c>
				LCD_WriteChar(key);
    3362:	8f a5       	ldd	r24, Y+47	; 0x2f
    3364:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
				password[max] = key;
    3368:	8d a5       	ldd	r24, Y+45	; 0x2d
    336a:	9e a5       	ldd	r25, Y+46	; 0x2e
    336c:	fc 01       	movw	r30, r24
    336e:	ee 5b       	subi	r30, 0xBE	; 190
    3370:	fe 4f       	sbci	r31, 0xFE	; 254
    3372:	8f a5       	ldd	r24, Y+47	; 0x2f
    3374:	80 83       	st	Z, r24
				max++;
    3376:	8d a5       	ldd	r24, Y+45	; 0x2d
    3378:	9e a5       	ldd	r25, Y+46	; 0x2e
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	9e a7       	std	Y+46, r25	; 0x2e
    337e:	8d a7       	std	Y+45, r24	; 0x2d
	}
	LCD_SetCursor(0,0);
	LCD_WriteString("ENTER PASSWORD");

	LCD_SetCursor(1,0);
	while(max < 5){
    3380:	8d a5       	ldd	r24, Y+45	; 0x2d
    3382:	9e a5       	ldd	r25, Y+46	; 0x2e
    3384:	85 30       	cpi	r24, 0x05	; 5
    3386:	91 05       	cpc	r25, r1
    3388:	1c f3       	brlt	.-58     	; 0x3350 <FIRE_INIT+0x23c>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	a8 ec       	ldi	r26, 0xC8	; 200
    3390:	b2 e4       	ldi	r27, 0x42	; 66
    3392:	8b 87       	std	Y+11, r24	; 0x0b
    3394:	9c 87       	std	Y+12, r25	; 0x0c
    3396:	ad 87       	std	Y+13, r26	; 0x0d
    3398:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339a:	6b 85       	ldd	r22, Y+11	; 0x0b
    339c:	7c 85       	ldd	r23, Y+12	; 0x0c
    339e:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	4a ef       	ldi	r20, 0xFA	; 250
    33a8:	54 e4       	ldi	r21, 0x44	; 68
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	8f 83       	std	Y+7, r24	; 0x07
    33b4:	98 87       	std	Y+8, r25	; 0x08
    33b6:	a9 87       	std	Y+9, r26	; 0x09
    33b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33ba:	6f 81       	ldd	r22, Y+7	; 0x07
    33bc:	78 85       	ldd	r23, Y+8	; 0x08
    33be:	89 85       	ldd	r24, Y+9	; 0x09
    33c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e8       	ldi	r20, 0x80	; 128
    33c8:	5f e3       	ldi	r21, 0x3F	; 63
    33ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ce:	88 23       	and	r24, r24
    33d0:	2c f4       	brge	.+10     	; 0x33dc <FIRE_INIT+0x2c8>
		__ticks = 1;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	8d 83       	std	Y+5, r24	; 0x05
    33da:	3f c0       	rjmp	.+126    	; 0x345a <FIRE_INIT+0x346>
	else if (__tmp > 65535)
    33dc:	6f 81       	ldd	r22, Y+7	; 0x07
    33de:	78 85       	ldd	r23, Y+8	; 0x08
    33e0:	89 85       	ldd	r24, Y+9	; 0x09
    33e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	3f ef       	ldi	r19, 0xFF	; 255
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	57 e4       	ldi	r21, 0x47	; 71
    33ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	4c f5       	brge	.+82     	; 0x3446 <FIRE_INIT+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e2       	ldi	r20, 0x20	; 32
    3402:	51 e4       	ldi	r21, 0x41	; 65
    3404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	9e 83       	std	Y+6, r25	; 0x06
    341a:	8d 83       	std	Y+5, r24	; 0x05
    341c:	0f c0       	rjmp	.+30     	; 0x343c <FIRE_INIT+0x328>
    341e:	88 ec       	ldi	r24, 0xC8	; 200
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9c 83       	std	Y+4, r25	; 0x04
    3424:	8b 83       	std	Y+3, r24	; 0x03
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <FIRE_INIT+0x316>
    342e:	9c 83       	std	Y+4, r25	; 0x04
    3430:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	69 f7       	brne	.-38     	; 0x341e <FIRE_INIT+0x30a>
    3444:	14 c0       	rjmp	.+40     	; 0x346e <FIRE_INIT+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3446:	6f 81       	ldd	r22, Y+7	; 0x07
    3448:	78 85       	ldd	r23, Y+8	; 0x08
    344a:	89 85       	ldd	r24, Y+9	; 0x09
    344c:	9a 85       	ldd	r25, Y+10	; 0x0a
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	9e 83       	std	Y+6, r25	; 0x06
    3458:	8d 83       	std	Y+5, r24	; 0x05
    345a:	8d 81       	ldd	r24, Y+5	; 0x05
    345c:	9e 81       	ldd	r25, Y+6	; 0x06
    345e:	9a 83       	std	Y+2, r25	; 0x02
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <FIRE_INIT+0x352>
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	89 83       	std	Y+1, r24	; 0x01
				max++;
			}
		}
	}
	_delay_ms(100);
	LCD_Clear();
    346e:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
}
    3472:	af 96       	adiw	r28, 0x2f	; 47
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <FIRE_CHECK_PASS>:


int FIRE_CHECK_PASS(void){
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	69 97       	sbiw	r28, 0x19	; 25
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
	int i = 0,flag=1,flag2=0;
    3498:	1f 8a       	std	Y+23, r1	; 0x17
    349a:	1e 8a       	std	Y+22, r1	; 0x16
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	9d 8b       	std	Y+21, r25	; 0x15
    34a2:	8c 8b       	std	Y+20, r24	; 0x14
    34a4:	1b 8a       	std	Y+19, r1	; 0x13
    34a6:	1a 8a       	std	Y+18, r1	; 0x12
	int max = 0;
    34a8:	19 8a       	std	Y+17, r1	; 0x11
    34aa:	18 8a       	std	Y+16, r1	; 0x10
	char key;
	LCD_Clear();
    34ac:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
	LCD_WriteString("enter password");
    34b0:	8b e7       	ldi	r24, 0x7B	; 123
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
	LCD_SetCursor(1,0);
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	60 e0       	ldi	r22, 0x00	; 0
    34bc:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
    34c0:	c0 c0       	rjmp	.+384    	; 0x3642 <FIRE_CHECK_PASS+0x1be>

	while(max < 5){
		key = KEYPAD_GetKey();
    34c2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <KEYPAD_GetKey>
    34c6:	8f 87       	std	Y+15, r24	; 0x0f

		if(key != 'N'){
    34c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ca:	8e 34       	cpi	r24, 0x4E	; 78
    34cc:	a1 f0       	breq	.+40     	; 0x34f6 <FIRE_CHECK_PASS+0x72>
			LCD_WriteChar(key);
    34ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
			check[max]= key;
    34d4:	88 89       	ldd	r24, Y+16	; 0x10
    34d6:	99 89       	ldd	r25, Y+17	; 0x11
    34d8:	fc 01       	movw	r30, r24
    34da:	e7 5b       	subi	r30, 0xB7	; 183
    34dc:	fe 4f       	sbci	r31, 0xFE	; 254
    34de:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e0:	80 83       	st	Z, r24
			max++;
    34e2:	88 89       	ldd	r24, Y+16	; 0x10
    34e4:	99 89       	ldd	r25, Y+17	; 0x11
    34e6:	01 96       	adiw	r24, 0x01	; 1
    34e8:	99 8b       	std	Y+17, r25	; 0x11
    34ea:	88 8b       	std	Y+16, r24	; 0x10
			flag2=1;
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	9b 8b       	std	Y+19, r25	; 0x13
    34f2:	8a 8b       	std	Y+18, r24	; 0x12
    34f4:	a6 c0       	rjmp	.+332    	; 0x3642 <FIRE_CHECK_PASS+0x1be>
		}else{
			if(flag2 == 0){
    34f6:	8a 89       	ldd	r24, Y+18	; 0x12
    34f8:	9b 89       	ldd	r25, Y+19	; 0x13
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	09 f0       	breq	.+2      	; 0x3500 <FIRE_CHECK_PASS+0x7c>
    34fe:	a1 c0       	rjmp	.+322    	; 0x3642 <FIRE_CHECK_PASS+0x1be>
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	a0 e8       	ldi	r26, 0x80	; 128
    3506:	bf e3       	ldi	r27, 0x3F	; 63
    3508:	8b 87       	std	Y+11, r24	; 0x0b
    350a:	9c 87       	std	Y+12, r25	; 0x0c
    350c:	ad 87       	std	Y+13, r26	; 0x0d
    350e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3510:	6b 85       	ldd	r22, Y+11	; 0x0b
    3512:	7c 85       	ldd	r23, Y+12	; 0x0c
    3514:	8d 85       	ldd	r24, Y+13	; 0x0d
    3516:	9e 85       	ldd	r25, Y+14	; 0x0e
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	4a ef       	ldi	r20, 0xFA	; 250
    351e:	54 e4       	ldi	r21, 0x44	; 68
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	8f 83       	std	Y+7, r24	; 0x07
    352a:	98 87       	std	Y+8, r25	; 0x08
    352c:	a9 87       	std	Y+9, r26	; 0x09
    352e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3530:	6f 81       	ldd	r22, Y+7	; 0x07
    3532:	78 85       	ldd	r23, Y+8	; 0x08
    3534:	89 85       	ldd	r24, Y+9	; 0x09
    3536:	9a 85       	ldd	r25, Y+10	; 0x0a
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e8       	ldi	r20, 0x80	; 128
    353e:	5f e3       	ldi	r21, 0x3F	; 63
    3540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3544:	88 23       	and	r24, r24
    3546:	2c f4       	brge	.+10     	; 0x3552 <FIRE_CHECK_PASS+0xce>
		__ticks = 1;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	9e 83       	std	Y+6, r25	; 0x06
    354e:	8d 83       	std	Y+5, r24	; 0x05
    3550:	3f c0       	rjmp	.+126    	; 0x35d0 <FIRE_CHECK_PASS+0x14c>
	else if (__tmp > 65535)
    3552:	6f 81       	ldd	r22, Y+7	; 0x07
    3554:	78 85       	ldd	r23, Y+8	; 0x08
    3556:	89 85       	ldd	r24, Y+9	; 0x09
    3558:	9a 85       	ldd	r25, Y+10	; 0x0a
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	3f ef       	ldi	r19, 0xFF	; 255
    355e:	4f e7       	ldi	r20, 0x7F	; 127
    3560:	57 e4       	ldi	r21, 0x47	; 71
    3562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3566:	18 16       	cp	r1, r24
    3568:	4c f5       	brge	.+82     	; 0x35bc <FIRE_CHECK_PASS+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356a:	6b 85       	ldd	r22, Y+11	; 0x0b
    356c:	7c 85       	ldd	r23, Y+12	; 0x0c
    356e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3570:	9e 85       	ldd	r25, Y+14	; 0x0e
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e2       	ldi	r20, 0x20	; 32
    3578:	51 e4       	ldi	r21, 0x41	; 65
    357a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	bc 01       	movw	r22, r24
    3584:	cd 01       	movw	r24, r26
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
    3592:	0f c0       	rjmp	.+30     	; 0x35b2 <FIRE_CHECK_PASS+0x12e>
    3594:	88 ec       	ldi	r24, 0xC8	; 200
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	9c 81       	ldd	r25, Y+4	; 0x04
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <FIRE_CHECK_PASS+0x11c>
    35a4:	9c 83       	std	Y+4, r25	; 0x04
    35a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a8:	8d 81       	ldd	r24, Y+5	; 0x05
    35aa:	9e 81       	ldd	r25, Y+6	; 0x06
    35ac:	01 97       	sbiw	r24, 0x01	; 1
    35ae:	9e 83       	std	Y+6, r25	; 0x06
    35b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b2:	8d 81       	ldd	r24, Y+5	; 0x05
    35b4:	9e 81       	ldd	r25, Y+6	; 0x06
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	69 f7       	brne	.-38     	; 0x3594 <FIRE_CHECK_PASS+0x110>
    35ba:	14 c0       	rjmp	.+40     	; 0x35e4 <FIRE_CHECK_PASS+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35bc:	6f 81       	ldd	r22, Y+7	; 0x07
    35be:	78 85       	ldd	r23, Y+8	; 0x08
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	9e 83       	std	Y+6, r25	; 0x06
    35ce:	8d 83       	std	Y+5, r24	; 0x05
    35d0:	8d 81       	ldd	r24, Y+5	; 0x05
    35d2:	9e 81       	ldd	r25, Y+6	; 0x06
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	f1 f7       	brne	.-4      	; 0x35dc <FIRE_CHECK_PASS+0x158>
    35e0:	9a 83       	std	Y+2, r25	; 0x02
    35e2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);
				count++;
    35e4:	80 91 3c 01 	lds	r24, 0x013C
    35e8:	90 91 3d 01 	lds	r25, 0x013D
    35ec:	a0 91 3e 01 	lds	r26, 0x013E
    35f0:	b0 91 3f 01 	lds	r27, 0x013F
    35f4:	01 96       	adiw	r24, 0x01	; 1
    35f6:	a1 1d       	adc	r26, r1
    35f8:	b1 1d       	adc	r27, r1
    35fa:	80 93 3c 01 	sts	0x013C, r24
    35fe:	90 93 3d 01 	sts	0x013D, r25
    3602:	a0 93 3e 01 	sts	0x013E, r26
    3606:	b0 93 3f 01 	sts	0x013F, r27
				if(count > 8000){
    360a:	80 91 3c 01 	lds	r24, 0x013C
    360e:	90 91 3d 01 	lds	r25, 0x013D
    3612:	a0 91 3e 01 	lds	r26, 0x013E
    3616:	b0 91 3f 01 	lds	r27, 0x013F
    361a:	81 34       	cpi	r24, 0x41	; 65
    361c:	2f e1       	ldi	r18, 0x1F	; 31
    361e:	92 07       	cpc	r25, r18
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	a2 07       	cpc	r26, r18
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	b2 07       	cpc	r27, r18
    3628:	60 f0       	brcs	.+24     	; 0x3642 <FIRE_CHECK_PASS+0x1be>
					UART_Send('8');
    362a:	88 e3       	ldi	r24, 0x38	; 56
    362c:	0e 94 c3 05 	call	0xb86	; 0xb86 <UART_Send>
					count = 0;
    3630:	10 92 3c 01 	sts	0x013C, r1
    3634:	10 92 3d 01 	sts	0x013D, r1
    3638:	10 92 3e 01 	sts	0x013E, r1
    363c:	10 92 3f 01 	sts	0x013F, r1
    3640:	06 c0       	rjmp	.+12     	; 0x364e <FIRE_CHECK_PASS+0x1ca>
	char key;
	LCD_Clear();
	LCD_WriteString("enter password");
	LCD_SetCursor(1,0);

	while(max < 5){
    3642:	88 89       	ldd	r24, Y+16	; 0x10
    3644:	99 89       	ldd	r25, Y+17	; 0x11
    3646:	85 30       	cpi	r24, 0x05	; 5
    3648:	91 05       	cpc	r25, r1
    364a:	0c f4       	brge	.+2      	; 0x364e <FIRE_CHECK_PASS+0x1ca>
    364c:	3a cf       	rjmp	.-396    	; 0x34c2 <FIRE_CHECK_PASS+0x3e>
					break;
				}
			}
		}
	}
	LCD_SetCursor(0,0);
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
	for(i = 0 ; i < 4 ;i++){
    3656:	1f 8a       	std	Y+23, r1	; 0x17
    3658:	1e 8a       	std	Y+22, r1	; 0x16
    365a:	2a c0       	rjmp	.+84     	; 0x36b0 <FIRE_CHECK_PASS+0x22c>
		if(check[i] != password [i]){
    365c:	8e 89       	ldd	r24, Y+22	; 0x16
    365e:	9f 89       	ldd	r25, Y+23	; 0x17
    3660:	fc 01       	movw	r30, r24
    3662:	e7 5b       	subi	r30, 0xB7	; 183
    3664:	fe 4f       	sbci	r31, 0xFE	; 254
    3666:	20 81       	ld	r18, Z
    3668:	8e 89       	ldd	r24, Y+22	; 0x16
    366a:	9f 89       	ldd	r25, Y+23	; 0x17
    366c:	fc 01       	movw	r30, r24
    366e:	ee 5b       	subi	r30, 0xBE	; 190
    3670:	fe 4f       	sbci	r31, 0xFE	; 254
    3672:	80 81       	ld	r24, Z
    3674:	28 17       	cp	r18, r24
    3676:	b9 f0       	breq	.+46     	; 0x36a6 <FIRE_CHECK_PASS+0x222>
			LCD_WriteChar(check[i]);
    3678:	8e 89       	ldd	r24, Y+22	; 0x16
    367a:	9f 89       	ldd	r25, Y+23	; 0x17
    367c:	fc 01       	movw	r30, r24
    367e:	e7 5b       	subi	r30, 0xB7	; 183
    3680:	fe 4f       	sbci	r31, 0xFE	; 254
    3682:	80 81       	ld	r24, Z
    3684:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
			LCD_WriteChar(password[i]);
    3688:	8e 89       	ldd	r24, Y+22	; 0x16
    368a:	9f 89       	ldd	r25, Y+23	; 0x17
    368c:	fc 01       	movw	r30, r24
    368e:	ee 5b       	subi	r30, 0xBE	; 190
    3690:	fe 4f       	sbci	r31, 0xFE	; 254
    3692:	80 81       	ld	r24, Z
    3694:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
			flag = 0;
    3698:	1d 8a       	std	Y+21, r1	; 0x15
    369a:	1c 8a       	std	Y+20, r1	; 0x14
			return flag;
    369c:	8c 89       	ldd	r24, Y+20	; 0x14
    369e:	9d 89       	ldd	r25, Y+21	; 0x15
    36a0:	99 8f       	std	Y+25, r25	; 0x19
    36a2:	88 8f       	std	Y+24, r24	; 0x18
    36a4:	0e c0       	rjmp	.+28     	; 0x36c2 <FIRE_CHECK_PASS+0x23e>
				}
			}
		}
	}
	LCD_SetCursor(0,0);
	for(i = 0 ; i < 4 ;i++){
    36a6:	8e 89       	ldd	r24, Y+22	; 0x16
    36a8:	9f 89       	ldd	r25, Y+23	; 0x17
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	9f 8b       	std	Y+23, r25	; 0x17
    36ae:	8e 8b       	std	Y+22, r24	; 0x16
    36b0:	8e 89       	ldd	r24, Y+22	; 0x16
    36b2:	9f 89       	ldd	r25, Y+23	; 0x17
    36b4:	84 30       	cpi	r24, 0x04	; 4
    36b6:	91 05       	cpc	r25, r1
    36b8:	8c f2       	brlt	.-94     	; 0x365c <FIRE_CHECK_PASS+0x1d8>
			LCD_WriteChar(password[i]);
			flag = 0;
			return flag;
		}
	}
	return flag;
    36ba:	8c 89       	ldd	r24, Y+20	; 0x14
    36bc:	9d 89       	ldd	r25, Y+21	; 0x15
    36be:	99 8f       	std	Y+25, r25	; 0x19
    36c0:	88 8f       	std	Y+24, r24	; 0x18
    36c2:	88 8d       	ldd	r24, Y+24	; 0x18
    36c4:	99 8d       	ldd	r25, Y+25	; 0x19
}
    36c6:	69 96       	adiw	r28, 0x19	; 25
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	cf 91       	pop	r28
    36d4:	df 91       	pop	r29
    36d6:	08 95       	ret

000036d8 <FIRE_SYSTEM>:


void FIRE_SYSTEM(int check){
    36d8:	df 93       	push	r29
    36da:	cf 93       	push	r28
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	6e 97       	sbiw	r28, 0x1e	; 30
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	9e 8f       	std	Y+30, r25	; 0x1e
    36ee:	8d 8f       	std	Y+29, r24	; 0x1d
	if(check == 0){
    36f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	09 f0       	breq	.+2      	; 0x36fa <FIRE_SYSTEM+0x22>
    36f8:	7b c0       	rjmp	.+246    	; 0x37f0 <FIRE_SYSTEM+0x118>
		LCD_Clear();
    36fa:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
		LCD_WriteString("NOT CORRECT");
    36fe:	8a e8       	ldi	r24, 0x8A	; 138
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	af e2       	ldi	r26, 0x2F	; 47
    370c:	b4 e4       	ldi	r27, 0x44	; 68
    370e:	89 8f       	std	Y+25, r24	; 0x19
    3710:	9a 8f       	std	Y+26, r25	; 0x1a
    3712:	ab 8f       	std	Y+27, r26	; 0x1b
    3714:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3716:	69 8d       	ldd	r22, Y+25	; 0x19
    3718:	7a 8d       	ldd	r23, Y+26	; 0x1a
    371a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    371c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	4a ef       	ldi	r20, 0xFA	; 250
    3724:	54 e4       	ldi	r21, 0x44	; 68
    3726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	8d 8b       	std	Y+21, r24	; 0x15
    3730:	9e 8b       	std	Y+22, r25	; 0x16
    3732:	af 8b       	std	Y+23, r26	; 0x17
    3734:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3736:	6d 89       	ldd	r22, Y+21	; 0x15
    3738:	7e 89       	ldd	r23, Y+22	; 0x16
    373a:	8f 89       	ldd	r24, Y+23	; 0x17
    373c:	98 8d       	ldd	r25, Y+24	; 0x18
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e8       	ldi	r20, 0x80	; 128
    3744:	5f e3       	ldi	r21, 0x3F	; 63
    3746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    374a:	88 23       	and	r24, r24
    374c:	2c f4       	brge	.+10     	; 0x3758 <FIRE_SYSTEM+0x80>
		__ticks = 1;
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9c 8b       	std	Y+20, r25	; 0x14
    3754:	8b 8b       	std	Y+19, r24	; 0x13
    3756:	3f c0       	rjmp	.+126    	; 0x37d6 <FIRE_SYSTEM+0xfe>
	else if (__tmp > 65535)
    3758:	6d 89       	ldd	r22, Y+21	; 0x15
    375a:	7e 89       	ldd	r23, Y+22	; 0x16
    375c:	8f 89       	ldd	r24, Y+23	; 0x17
    375e:	98 8d       	ldd	r25, Y+24	; 0x18
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	3f ef       	ldi	r19, 0xFF	; 255
    3764:	4f e7       	ldi	r20, 0x7F	; 127
    3766:	57 e4       	ldi	r21, 0x47	; 71
    3768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    376c:	18 16       	cp	r1, r24
    376e:	4c f5       	brge	.+82     	; 0x37c2 <FIRE_SYSTEM+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3770:	69 8d       	ldd	r22, Y+25	; 0x19
    3772:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3774:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3776:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	40 e2       	ldi	r20, 0x20	; 32
    377e:	51 e4       	ldi	r21, 0x41	; 65
    3780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9c 8b       	std	Y+20, r25	; 0x14
    3796:	8b 8b       	std	Y+19, r24	; 0x13
    3798:	0f c0       	rjmp	.+30     	; 0x37b8 <FIRE_SYSTEM+0xe0>
    379a:	88 ec       	ldi	r24, 0xC8	; 200
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	9a 8b       	std	Y+18, r25	; 0x12
    37a0:	89 8b       	std	Y+17, r24	; 0x11
    37a2:	89 89       	ldd	r24, Y+17	; 0x11
    37a4:	9a 89       	ldd	r25, Y+18	; 0x12
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <FIRE_SYSTEM+0xce>
    37aa:	9a 8b       	std	Y+18, r25	; 0x12
    37ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ae:	8b 89       	ldd	r24, Y+19	; 0x13
    37b0:	9c 89       	ldd	r25, Y+20	; 0x14
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	9c 8b       	std	Y+20, r25	; 0x14
    37b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ba:	9c 89       	ldd	r25, Y+20	; 0x14
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	69 f7       	brne	.-38     	; 0x379a <FIRE_SYSTEM+0xc2>
    37c0:	14 c0       	rjmp	.+40     	; 0x37ea <FIRE_SYSTEM+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c2:	6d 89       	ldd	r22, Y+21	; 0x15
    37c4:	7e 89       	ldd	r23, Y+22	; 0x16
    37c6:	8f 89       	ldd	r24, Y+23	; 0x17
    37c8:	98 8d       	ldd	r25, Y+24	; 0x18
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9c 8b       	std	Y+20, r25	; 0x14
    37d4:	8b 8b       	std	Y+19, r24	; 0x13
    37d6:	8b 89       	ldd	r24, Y+19	; 0x13
    37d8:	9c 89       	ldd	r25, Y+20	; 0x14
    37da:	98 8b       	std	Y+16, r25	; 0x10
    37dc:	8f 87       	std	Y+15, r24	; 0x0f
    37de:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e0:	98 89       	ldd	r25, Y+16	; 0x10
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <FIRE_SYSTEM+0x10a>
    37e6:	98 8b       	std	Y+16, r25	; 0x10
    37e8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(700);
		LCD_Clear();
    37ea:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
    37ee:	78 c0       	rjmp	.+240    	; 0x38e0 <FIRE_SYSTEM+0x208>
	}else{
		LCD_Clear();
    37f0:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
		LCD_WriteString("CORRECT PASSWORD");
    37f4:	86 e9       	ldi	r24, 0x96	; 150
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	af e2       	ldi	r26, 0x2F	; 47
    3802:	b4 e4       	ldi	r27, 0x44	; 68
    3804:	8b 87       	std	Y+11, r24	; 0x0b
    3806:	9c 87       	std	Y+12, r25	; 0x0c
    3808:	ad 87       	std	Y+13, r26	; 0x0d
    380a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380c:	6b 85       	ldd	r22, Y+11	; 0x0b
    380e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3810:	8d 85       	ldd	r24, Y+13	; 0x0d
    3812:	9e 85       	ldd	r25, Y+14	; 0x0e
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	4a ef       	ldi	r20, 0xFA	; 250
    381a:	54 e4       	ldi	r21, 0x44	; 68
    381c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	8f 83       	std	Y+7, r24	; 0x07
    3826:	98 87       	std	Y+8, r25	; 0x08
    3828:	a9 87       	std	Y+9, r26	; 0x09
    382a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    382c:	6f 81       	ldd	r22, Y+7	; 0x07
    382e:	78 85       	ldd	r23, Y+8	; 0x08
    3830:	89 85       	ldd	r24, Y+9	; 0x09
    3832:	9a 85       	ldd	r25, Y+10	; 0x0a
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e8       	ldi	r20, 0x80	; 128
    383a:	5f e3       	ldi	r21, 0x3F	; 63
    383c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3840:	88 23       	and	r24, r24
    3842:	2c f4       	brge	.+10     	; 0x384e <FIRE_SYSTEM+0x176>
		__ticks = 1;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	9e 83       	std	Y+6, r25	; 0x06
    384a:	8d 83       	std	Y+5, r24	; 0x05
    384c:	3f c0       	rjmp	.+126    	; 0x38cc <FIRE_SYSTEM+0x1f4>
	else if (__tmp > 65535)
    384e:	6f 81       	ldd	r22, Y+7	; 0x07
    3850:	78 85       	ldd	r23, Y+8	; 0x08
    3852:	89 85       	ldd	r24, Y+9	; 0x09
    3854:	9a 85       	ldd	r25, Y+10	; 0x0a
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	3f ef       	ldi	r19, 0xFF	; 255
    385a:	4f e7       	ldi	r20, 0x7F	; 127
    385c:	57 e4       	ldi	r21, 0x47	; 71
    385e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3862:	18 16       	cp	r1, r24
    3864:	4c f5       	brge	.+82     	; 0x38b8 <FIRE_SYSTEM+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3866:	6b 85       	ldd	r22, Y+11	; 0x0b
    3868:	7c 85       	ldd	r23, Y+12	; 0x0c
    386a:	8d 85       	ldd	r24, Y+13	; 0x0d
    386c:	9e 85       	ldd	r25, Y+14	; 0x0e
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e2       	ldi	r20, 0x20	; 32
    3874:	51 e4       	ldi	r21, 0x41	; 65
    3876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	9e 83       	std	Y+6, r25	; 0x06
    388c:	8d 83       	std	Y+5, r24	; 0x05
    388e:	0f c0       	rjmp	.+30     	; 0x38ae <FIRE_SYSTEM+0x1d6>
    3890:	88 ec       	ldi	r24, 0xC8	; 200
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	9c 83       	std	Y+4, r25	; 0x04
    3896:	8b 83       	std	Y+3, r24	; 0x03
    3898:	8b 81       	ldd	r24, Y+3	; 0x03
    389a:	9c 81       	ldd	r25, Y+4	; 0x04
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	f1 f7       	brne	.-4      	; 0x389c <FIRE_SYSTEM+0x1c4>
    38a0:	9c 83       	std	Y+4, r25	; 0x04
    38a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a4:	8d 81       	ldd	r24, Y+5	; 0x05
    38a6:	9e 81       	ldd	r25, Y+6	; 0x06
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	9e 83       	std	Y+6, r25	; 0x06
    38ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ae:	8d 81       	ldd	r24, Y+5	; 0x05
    38b0:	9e 81       	ldd	r25, Y+6	; 0x06
    38b2:	00 97       	sbiw	r24, 0x00	; 0
    38b4:	69 f7       	brne	.-38     	; 0x3890 <FIRE_SYSTEM+0x1b8>
    38b6:	14 c0       	rjmp	.+40     	; 0x38e0 <FIRE_SYSTEM+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ba:	78 85       	ldd	r23, Y+8	; 0x08
    38bc:	89 85       	ldd	r24, Y+9	; 0x09
    38be:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	9e 83       	std	Y+6, r25	; 0x06
    38ca:	8d 83       	std	Y+5, r24	; 0x05
    38cc:	8d 81       	ldd	r24, Y+5	; 0x05
    38ce:	9e 81       	ldd	r25, Y+6	; 0x06
    38d0:	9a 83       	std	Y+2, r25	; 0x02
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	9a 81       	ldd	r25, Y+2	; 0x02
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <FIRE_SYSTEM+0x200>
    38dc:	9a 83       	std	Y+2, r25	; 0x02
    38de:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(700);
	}
	LCD_Clear();
    38e0:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
}
    38e4:	6e 96       	adiw	r28, 0x1e	; 30
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	f8 94       	cli
    38ea:	de bf       	out	0x3e, r29	; 62
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	cd bf       	out	0x3d, r28	; 61
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	08 95       	ret

000038f6 <FIRE_Runnable>:


void FIRE_Runnable(void)
{
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <FIRE_Runnable+0x6>
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
	switch(state)
    3900:	80 91 3b 01 	lds	r24, 0x013B
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	3a 83       	std	Y+2, r19	; 0x02
    390a:	29 83       	std	Y+1, r18	; 0x01
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	9a 81       	ldd	r25, Y+2	; 0x02
    3910:	81 30       	cpi	r24, 0x01	; 1
    3912:	91 05       	cpc	r25, r1
    3914:	61 f0       	breq	.+24     	; 0x392e <FIRE_Runnable+0x38>
    3916:	29 81       	ldd	r18, Y+1	; 0x01
    3918:	3a 81       	ldd	r19, Y+2	; 0x02
    391a:	22 30       	cpi	r18, 0x02	; 2
    391c:	31 05       	cpc	r19, r1
    391e:	51 f0       	breq	.+20     	; 0x3934 <FIRE_Runnable+0x3e>
    3920:	89 81       	ldd	r24, Y+1	; 0x01
    3922:	9a 81       	ldd	r25, Y+2	; 0x02
    3924:	00 97       	sbiw	r24, 0x00	; 0
    3926:	41 f4       	brne	.+16     	; 0x3938 <FIRE_Runnable+0x42>
	{
		case FINE:
		fine_state();
    3928:	0e 94 a1 1c 	call	0x3942	; 0x3942 <fine_state>
    392c:	05 c0       	rjmp	.+10     	; 0x3938 <FIRE_Runnable+0x42>
		break;

		case HEAT:
		heat_state();
    392e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <heat_state>
    3932:	02 c0       	rjmp	.+4      	; 0x3938 <FIRE_Runnable+0x42>
		break;

		case FIRE:
		fire_state();
    3934:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <fire_state>
		break;
	}
}
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <fine_state>:


static void fine_state(void)
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
    394a:	60 97       	sbiw	r28, 0x10	; 16
    394c:	0f b6       	in	r0, 0x3f	; 63
    394e:	f8 94       	cli
    3950:	de bf       	out	0x3e, r29	; 62
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	cd bf       	out	0x3d, r28	; 61
	u16 temp;
	LCD_Clear();
    3956:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
	while(1)
	{
		LCD_SetCursor(0,0);
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
		LCD_WriteString("Temp  : ");
    3962:	87 ea       	ldi	r24, 0xA7	; 167
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		temp = Temp_Read();
    396a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <Temp_Read>
    396e:	98 8b       	std	Y+16, r25	; 0x10
    3970:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_WriteNumber(temp/10);
    3972:	8f 85       	ldd	r24, Y+15	; 0x0f
    3974:	98 89       	ldd	r25, Y+16	; 0x10
    3976:	2a e0       	ldi	r18, 0x0A	; 10
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	b9 01       	movw	r22, r18
    397c:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3980:	cb 01       	movw	r24, r22
    3982:	cc 01       	movw	r24, r24
    3984:	a0 e0       	ldi	r26, 0x00	; 0
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	bc 01       	movw	r22, r24
    398a:	cd 01       	movw	r24, r26
    398c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
		LCD_WriteChar('.');
    3990:	8e e2       	ldi	r24, 0x2E	; 46
    3992:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
		LCD_WriteNumber(temp%10);
    3996:	8f 85       	ldd	r24, Y+15	; 0x0f
    3998:	98 89       	ldd	r25, Y+16	; 0x10
    399a:	2a e0       	ldi	r18, 0x0A	; 10
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	b9 01       	movw	r22, r18
    39a0:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    39a4:	cc 01       	movw	r24, r24
    39a6:	a0 e0       	ldi	r26, 0x00	; 0
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
		LCD_WriteString("  C  ");
    39b2:	80 eb       	ldi	r24, 0xB0	; 176
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>

		LCD_SetCursor(1,0);
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
		LCD_WriteString("State : ");
    39c2:	86 eb       	ldi	r24, 0xB6	; 182
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		LCD_WriteString("Fine    ");
    39ca:	8f eb       	ldi	r24, 0xBF	; 191
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		if((temp/10) >= 45)
    39d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d4:	98 89       	ldd	r25, Y+16	; 0x10
    39d6:	21 e0       	ldi	r18, 0x01	; 1
    39d8:	82 3c       	cpi	r24, 0xC2	; 194
    39da:	92 07       	cpc	r25, r18
    39dc:	60 f0       	brcs	.+24     	; 0x39f6 <fine_state+0xb4>
		{
			state = HEAT;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	80 93 3b 01 	sts	0x013B, r24
			break;
		}
		_delay_ms(700);
	}
}
    39e4:	60 96       	adiw	r28, 0x10	; 16
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	af e2       	ldi	r26, 0x2F	; 47
    39fc:	b4 e4       	ldi	r27, 0x44	; 68
    39fe:	8b 87       	std	Y+11, r24	; 0x0b
    3a00:	9c 87       	std	Y+12, r25	; 0x0c
    3a02:	ad 87       	std	Y+13, r26	; 0x0d
    3a04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	4a ef       	ldi	r20, 0xFA	; 250
    3a14:	54 e4       	ldi	r21, 0x44	; 68
    3a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	8f 83       	std	Y+7, r24	; 0x07
    3a20:	98 87       	std	Y+8, r25	; 0x08
    3a22:	a9 87       	std	Y+9, r26	; 0x09
    3a24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a26:	6f 81       	ldd	r22, Y+7	; 0x07
    3a28:	78 85       	ldd	r23, Y+8	; 0x08
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e8       	ldi	r20, 0x80	; 128
    3a34:	5f e3       	ldi	r21, 0x3F	; 63
    3a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a3a:	88 23       	and	r24, r24
    3a3c:	2c f4       	brge	.+10     	; 0x3a48 <fine_state+0x106>
		__ticks = 1;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	9e 83       	std	Y+6, r25	; 0x06
    3a44:	8d 83       	std	Y+5, r24	; 0x05
    3a46:	3f c0       	rjmp	.+126    	; 0x3ac6 <fine_state+0x184>
	else if (__tmp > 65535)
    3a48:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4a:	78 85       	ldd	r23, Y+8	; 0x08
    3a4c:	89 85       	ldd	r24, Y+9	; 0x09
    3a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	3f ef       	ldi	r19, 0xFF	; 255
    3a54:	4f e7       	ldi	r20, 0x7F	; 127
    3a56:	57 e4       	ldi	r21, 0x47	; 71
    3a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a5c:	18 16       	cp	r1, r24
    3a5e:	4c f5       	brge	.+82     	; 0x3ab2 <fine_state+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e2       	ldi	r20, 0x20	; 32
    3a6e:	51 e4       	ldi	r21, 0x41	; 65
    3a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	9e 83       	std	Y+6, r25	; 0x06
    3a86:	8d 83       	std	Y+5, r24	; 0x05
    3a88:	0f c0       	rjmp	.+30     	; 0x3aa8 <fine_state+0x166>
    3a8a:	88 ec       	ldi	r24, 0xC8	; 200
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9c 83       	std	Y+4, r25	; 0x04
    3a90:	8b 83       	std	Y+3, r24	; 0x03
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
    3a94:	9c 81       	ldd	r25, Y+4	; 0x04
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <fine_state+0x154>
    3a9a:	9c 83       	std	Y+4, r25	; 0x04
    3a9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	9e 83       	std	Y+6, r25	; 0x06
    3aa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	69 f7       	brne	.-38     	; 0x3a8a <fine_state+0x148>
    3ab0:	54 cf       	rjmp	.-344    	; 0x395a <fine_state+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab4:	78 85       	ldd	r23, Y+8	; 0x08
    3ab6:	89 85       	ldd	r24, Y+9	; 0x09
    3ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	9e 83       	std	Y+6, r25	; 0x06
    3ac4:	8d 83       	std	Y+5, r24	; 0x05
    3ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aca:	9a 83       	std	Y+2, r25	; 0x02
    3acc:	89 83       	std	Y+1, r24	; 0x01
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	f1 f7       	brne	.-4      	; 0x3ad2 <fine_state+0x190>
    3ad6:	9a 83       	std	Y+2, r25	; 0x02
    3ad8:	89 83       	std	Y+1, r24	; 0x01
    3ada:	3f cf       	rjmp	.-386    	; 0x395a <fine_state+0x18>

00003adc <heat_state>:


static void heat_state(void)
{
    3adc:	df 93       	push	r29
    3ade:	cf 93       	push	r28
    3ae0:	00 d0       	rcall	.+0      	; 0x3ae2 <heat_state+0x6>
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
	u16 temp;
	LCD_Clear();
    3ae6:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
	while(1)
	{
		temp = Temp_Read();
    3aea:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <Temp_Read>
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
		LCD_SetCursor(0,0);
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	60 e0       	ldi	r22, 0x00	; 0
    3af6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
		LCD_WriteString("Temp  : ");
    3afa:	87 ea       	ldi	r24, 0xA7	; 167
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		LCD_WriteNumber(temp/10);
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	9a 81       	ldd	r25, Y+2	; 0x02
    3b06:	2a e0       	ldi	r18, 0x0A	; 10
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	b9 01       	movw	r22, r18
    3b0c:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3b10:	cb 01       	movw	r24, r22
    3b12:	cc 01       	movw	r24, r24
    3b14:	a0 e0       	ldi	r26, 0x00	; 0
    3b16:	b0 e0       	ldi	r27, 0x00	; 0
    3b18:	bc 01       	movw	r22, r24
    3b1a:	cd 01       	movw	r24, r26
    3b1c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
		LCD_WriteChar('.');
    3b20:	8e e2       	ldi	r24, 0x2E	; 46
    3b22:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
		LCD_WriteNumber(temp%10);
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2a:	2a e0       	ldi	r18, 0x0A	; 10
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	b9 01       	movw	r22, r18
    3b30:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3b34:	cc 01       	movw	r24, r24
    3b36:	a0 e0       	ldi	r26, 0x00	; 0
    3b38:	b0 e0       	ldi	r27, 0x00	; 0
    3b3a:	bc 01       	movw	r22, r24
    3b3c:	cd 01       	movw	r24, r26
    3b3e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
		LCD_WriteString("  C  ");
    3b42:	80 eb       	ldi	r24, 0xB0	; 176
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		LCD_SetCursor(1,0);
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	60 e0       	ldi	r22, 0x00	; 0
    3b4e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
		LCD_WriteString("State : ");
    3b52:	86 eb       	ldi	r24, 0xB6	; 182
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		LCD_WriteString("Heat    ");
    3b5a:	88 ec       	ldi	r24, 0xC8	; 200
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		if((temp/10) >= 60)
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	9a 81       	ldd	r25, Y+2	; 0x02
    3b66:	22 e0       	ldi	r18, 0x02	; 2
    3b68:	88 35       	cpi	r24, 0x58	; 88
    3b6a:	92 07       	cpc	r25, r18
    3b6c:	20 f0       	brcs	.+8      	; 0x3b76 <heat_state+0x9a>
		{
			state = FIRE;
    3b6e:	82 e0       	ldi	r24, 0x02	; 2
    3b70:	80 93 3b 01 	sts	0x013B, r24
    3b74:	09 c0       	rjmp	.+18     	; 0x3b88 <heat_state+0xac>
			break;
		}
		if((temp/10) < 45){
    3b76:	89 81       	ldd	r24, Y+1	; 0x01
    3b78:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7a:	21 e0       	ldi	r18, 0x01	; 1
    3b7c:	82 3c       	cpi	r24, 0xC2	; 194
    3b7e:	92 07       	cpc	r25, r18
    3b80:	08 f0       	brcs	.+2      	; 0x3b84 <heat_state+0xa8>
    3b82:	b3 cf       	rjmp	.-154    	; 0x3aea <heat_state+0xe>
			state = FINE;
    3b84:	10 92 3b 01 	sts	0x013B, r1
			break;
		}
	}
}
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <fire_state>:


static void fire_state(void)
{
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <fire_state+0x6>
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
	u16 temp;
	LCD_Clear();
    3b9c:	0e 94 56 15 	call	0x2aac	; 0x2aac <LCD_Clear>
	while(1)
	{
		DIO_WritePin(RELAY,HIGH);
    3ba0:	89 e0       	ldi	r24, 0x09	; 9
    3ba2:	61 e0       	ldi	r22, 0x01	; 1
    3ba4:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
		temp = Temp_Read();
    3ba8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <Temp_Read>
    3bac:	9a 83       	std	Y+2, r25	; 0x02
    3bae:	89 83       	std	Y+1, r24	; 0x01
		LCD_SetCursor(0,0);
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	60 e0       	ldi	r22, 0x00	; 0
    3bb4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
		LCD_WriteString("Temp  : ");
    3bb8:	87 ea       	ldi	r24, 0xA7	; 167
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		LCD_WriteNumber(temp/10);
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	2a e0       	ldi	r18, 0x0A	; 10
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	b9 01       	movw	r22, r18
    3bca:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3bce:	cb 01       	movw	r24, r22
    3bd0:	cc 01       	movw	r24, r24
    3bd2:	a0 e0       	ldi	r26, 0x00	; 0
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	cd 01       	movw	r24, r26
    3bda:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
		LCD_WriteChar('.');
    3bde:	8e e2       	ldi	r24, 0x2E	; 46
    3be0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <LCD_WriteChar>
		LCD_WriteNumber(temp%10);
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
    3be6:	9a 81       	ldd	r25, Y+2	; 0x02
    3be8:	2a e0       	ldi	r18, 0x0A	; 10
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	b9 01       	movw	r22, r18
    3bee:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__udivmodhi4>
    3bf2:	cc 01       	movw	r24, r24
    3bf4:	a0 e0       	ldi	r26, 0x00	; 0
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	bc 01       	movw	r22, r24
    3bfa:	cd 01       	movw	r24, r26
    3bfc:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_WriteNumber>
		LCD_WriteString("  C  ");
    3c00:	80 eb       	ldi	r24, 0xB0	; 176
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		LCD_SetCursor(1,0);
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LCD_SetCursor>
		LCD_WriteString("State : ");
    3c10:	86 eb       	ldi	r24, 0xB6	; 182
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		LCD_WriteString("Fire    ");
    3c18:	81 ed       	ldi	r24, 0xD1	; 209
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_WriteString>
		if(FIRE_CHECK_PASS() == 1 ){
    3c20:	0e 94 42 1a 	call	0x3484	; 0x3484 <FIRE_CHECK_PASS>
    3c24:	81 30       	cpi	r24, 0x01	; 1
    3c26:	91 05       	cpc	r25, r1
    3c28:	f1 f4       	brne	.+60     	; 0x3c66 <fire_state+0xd4>
			FIRE_SYSTEM(1);
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <FIRE_SYSTEM>
			if((temp/10) < 60)
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	9a 81       	ldd	r25, Y+2	; 0x02
    3c36:	22 e0       	ldi	r18, 0x02	; 2
    3c38:	88 35       	cpi	r24, 0x58	; 88
    3c3a:	92 07       	cpc	r25, r18
    3c3c:	38 f4       	brcc	.+14     	; 0x3c4c <fire_state+0xba>
			{
				state = HEAT;
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	80 93 3b 01 	sts	0x013B, r24
				DIO_WritePin(RELAY,LOW);
    3c44:	89 e0       	ldi	r24, 0x09	; 9
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
			}
			if((temp/10) < 45){
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	21 e0       	ldi	r18, 0x01	; 1
    3c52:	82 3c       	cpi	r24, 0xC2	; 194
    3c54:	92 07       	cpc	r25, r18
    3c56:	60 f4       	brcc	.+24     	; 0x3c70 <fire_state+0xde>
				state = FINE;
    3c58:	10 92 3b 01 	sts	0x013B, r1
				DIO_WritePin(RELAY,LOW);
    3c5c:	89 e0       	ldi	r24, 0x09	; 9
    3c5e:	60 e0       	ldi	r22, 0x00	; 0
    3c60:	0e 94 13 0b 	call	0x1626	; 0x1626 <DIO_WritePin>
    3c64:	05 c0       	rjmp	.+10     	; 0x3c70 <fire_state+0xde>
			}
			break;
		}else{
			FIRE_SYSTEM(0);
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <FIRE_SYSTEM>
    3c6e:	98 cf       	rjmp	.-208    	; 0x3ba0 <fire_state+0xe>
		}

	}
}
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <main>:
#include "HAL/KEYPAD/KEYPAD_Interface.h"
#include "HAL/SENSOR/SENSOR_Inerface.h"
#include "MCAL/UART/UART.h"


int main(){
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    3c82:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DIO_Init>
	LCD_Init();
    3c86:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_Init>
	FIRE_INIT();
    3c8a:	0e 94 8a 18 	call	0x3114	; 0x3114 <FIRE_INIT>
	UART_Init();
    3c8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
	ADC_Init(VREF_VCC,ADC_SCALER_64);
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	66 e0       	ldi	r22, 0x06	; 6
    3c96:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <ADC_Init>
	ADC_StartConversion(CH_0);
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <ADC_StartConversion>
	while(1){

		FIRE_Runnable();
    3ca0:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <FIRE_Runnable>
    3ca4:	fd cf       	rjmp	.-6      	; 0x3ca0 <main+0x26>

00003ca6 <__mulsi3>:
    3ca6:	62 9f       	mul	r22, r18
    3ca8:	d0 01       	movw	r26, r0
    3caa:	73 9f       	mul	r23, r19
    3cac:	f0 01       	movw	r30, r0
    3cae:	82 9f       	mul	r24, r18
    3cb0:	e0 0d       	add	r30, r0
    3cb2:	f1 1d       	adc	r31, r1
    3cb4:	64 9f       	mul	r22, r20
    3cb6:	e0 0d       	add	r30, r0
    3cb8:	f1 1d       	adc	r31, r1
    3cba:	92 9f       	mul	r25, r18
    3cbc:	f0 0d       	add	r31, r0
    3cbe:	83 9f       	mul	r24, r19
    3cc0:	f0 0d       	add	r31, r0
    3cc2:	74 9f       	mul	r23, r20
    3cc4:	f0 0d       	add	r31, r0
    3cc6:	65 9f       	mul	r22, r21
    3cc8:	f0 0d       	add	r31, r0
    3cca:	99 27       	eor	r25, r25
    3ccc:	72 9f       	mul	r23, r18
    3cce:	b0 0d       	add	r27, r0
    3cd0:	e1 1d       	adc	r30, r1
    3cd2:	f9 1f       	adc	r31, r25
    3cd4:	63 9f       	mul	r22, r19
    3cd6:	b0 0d       	add	r27, r0
    3cd8:	e1 1d       	adc	r30, r1
    3cda:	f9 1f       	adc	r31, r25
    3cdc:	bd 01       	movw	r22, r26
    3cde:	cf 01       	movw	r24, r30
    3ce0:	11 24       	eor	r1, r1
    3ce2:	08 95       	ret

00003ce4 <__udivmodhi4>:
    3ce4:	aa 1b       	sub	r26, r26
    3ce6:	bb 1b       	sub	r27, r27
    3ce8:	51 e1       	ldi	r21, 0x11	; 17
    3cea:	07 c0       	rjmp	.+14     	; 0x3cfa <__udivmodhi4_ep>

00003cec <__udivmodhi4_loop>:
    3cec:	aa 1f       	adc	r26, r26
    3cee:	bb 1f       	adc	r27, r27
    3cf0:	a6 17       	cp	r26, r22
    3cf2:	b7 07       	cpc	r27, r23
    3cf4:	10 f0       	brcs	.+4      	; 0x3cfa <__udivmodhi4_ep>
    3cf6:	a6 1b       	sub	r26, r22
    3cf8:	b7 0b       	sbc	r27, r23

00003cfa <__udivmodhi4_ep>:
    3cfa:	88 1f       	adc	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	5a 95       	dec	r21
    3d00:	a9 f7       	brne	.-22     	; 0x3cec <__udivmodhi4_loop>
    3d02:	80 95       	com	r24
    3d04:	90 95       	com	r25
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	08 95       	ret

00003d0c <__divmodhi4>:
    3d0c:	97 fb       	bst	r25, 7
    3d0e:	09 2e       	mov	r0, r25
    3d10:	07 26       	eor	r0, r23
    3d12:	0a d0       	rcall	.+20     	; 0x3d28 <__divmodhi4_neg1>
    3d14:	77 fd       	sbrc	r23, 7
    3d16:	04 d0       	rcall	.+8      	; 0x3d20 <__divmodhi4_neg2>
    3d18:	e5 df       	rcall	.-54     	; 0x3ce4 <__udivmodhi4>
    3d1a:	06 d0       	rcall	.+12     	; 0x3d28 <__divmodhi4_neg1>
    3d1c:	00 20       	and	r0, r0
    3d1e:	1a f4       	brpl	.+6      	; 0x3d26 <__divmodhi4_exit>

00003d20 <__divmodhi4_neg2>:
    3d20:	70 95       	com	r23
    3d22:	61 95       	neg	r22
    3d24:	7f 4f       	sbci	r23, 0xFF	; 255

00003d26 <__divmodhi4_exit>:
    3d26:	08 95       	ret

00003d28 <__divmodhi4_neg1>:
    3d28:	f6 f7       	brtc	.-4      	; 0x3d26 <__divmodhi4_exit>
    3d2a:	90 95       	com	r25
    3d2c:	81 95       	neg	r24
    3d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d30:	08 95       	ret

00003d32 <__divmodsi4>:
    3d32:	97 fb       	bst	r25, 7
    3d34:	09 2e       	mov	r0, r25
    3d36:	05 26       	eor	r0, r21
    3d38:	0e d0       	rcall	.+28     	; 0x3d56 <__divmodsi4_neg1>
    3d3a:	57 fd       	sbrc	r21, 7
    3d3c:	04 d0       	rcall	.+8      	; 0x3d46 <__divmodsi4_neg2>
    3d3e:	14 d0       	rcall	.+40     	; 0x3d68 <__udivmodsi4>
    3d40:	0a d0       	rcall	.+20     	; 0x3d56 <__divmodsi4_neg1>
    3d42:	00 1c       	adc	r0, r0
    3d44:	38 f4       	brcc	.+14     	; 0x3d54 <__divmodsi4_exit>

00003d46 <__divmodsi4_neg2>:
    3d46:	50 95       	com	r21
    3d48:	40 95       	com	r20
    3d4a:	30 95       	com	r19
    3d4c:	21 95       	neg	r18
    3d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d50:	4f 4f       	sbci	r20, 0xFF	; 255
    3d52:	5f 4f       	sbci	r21, 0xFF	; 255

00003d54 <__divmodsi4_exit>:
    3d54:	08 95       	ret

00003d56 <__divmodsi4_neg1>:
    3d56:	f6 f7       	brtc	.-4      	; 0x3d54 <__divmodsi4_exit>
    3d58:	90 95       	com	r25
    3d5a:	80 95       	com	r24
    3d5c:	70 95       	com	r23
    3d5e:	61 95       	neg	r22
    3d60:	7f 4f       	sbci	r23, 0xFF	; 255
    3d62:	8f 4f       	sbci	r24, 0xFF	; 255
    3d64:	9f 4f       	sbci	r25, 0xFF	; 255
    3d66:	08 95       	ret

00003d68 <__udivmodsi4>:
    3d68:	a1 e2       	ldi	r26, 0x21	; 33
    3d6a:	1a 2e       	mov	r1, r26
    3d6c:	aa 1b       	sub	r26, r26
    3d6e:	bb 1b       	sub	r27, r27
    3d70:	fd 01       	movw	r30, r26
    3d72:	0d c0       	rjmp	.+26     	; 0x3d8e <__udivmodsi4_ep>

00003d74 <__udivmodsi4_loop>:
    3d74:	aa 1f       	adc	r26, r26
    3d76:	bb 1f       	adc	r27, r27
    3d78:	ee 1f       	adc	r30, r30
    3d7a:	ff 1f       	adc	r31, r31
    3d7c:	a2 17       	cp	r26, r18
    3d7e:	b3 07       	cpc	r27, r19
    3d80:	e4 07       	cpc	r30, r20
    3d82:	f5 07       	cpc	r31, r21
    3d84:	20 f0       	brcs	.+8      	; 0x3d8e <__udivmodsi4_ep>
    3d86:	a2 1b       	sub	r26, r18
    3d88:	b3 0b       	sbc	r27, r19
    3d8a:	e4 0b       	sbc	r30, r20
    3d8c:	f5 0b       	sbc	r31, r21

00003d8e <__udivmodsi4_ep>:
    3d8e:	66 1f       	adc	r22, r22
    3d90:	77 1f       	adc	r23, r23
    3d92:	88 1f       	adc	r24, r24
    3d94:	99 1f       	adc	r25, r25
    3d96:	1a 94       	dec	r1
    3d98:	69 f7       	brne	.-38     	; 0x3d74 <__udivmodsi4_loop>
    3d9a:	60 95       	com	r22
    3d9c:	70 95       	com	r23
    3d9e:	80 95       	com	r24
    3da0:	90 95       	com	r25
    3da2:	9b 01       	movw	r18, r22
    3da4:	ac 01       	movw	r20, r24
    3da6:	bd 01       	movw	r22, r26
    3da8:	cf 01       	movw	r24, r30
    3daa:	08 95       	ret

00003dac <__prologue_saves__>:
    3dac:	2f 92       	push	r2
    3dae:	3f 92       	push	r3
    3db0:	4f 92       	push	r4
    3db2:	5f 92       	push	r5
    3db4:	6f 92       	push	r6
    3db6:	7f 92       	push	r7
    3db8:	8f 92       	push	r8
    3dba:	9f 92       	push	r9
    3dbc:	af 92       	push	r10
    3dbe:	bf 92       	push	r11
    3dc0:	cf 92       	push	r12
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
    3dd4:	ca 1b       	sub	r28, r26
    3dd6:	db 0b       	sbc	r29, r27
    3dd8:	0f b6       	in	r0, 0x3f	; 63
    3dda:	f8 94       	cli
    3ddc:	de bf       	out	0x3e, r29	; 62
    3dde:	0f be       	out	0x3f, r0	; 63
    3de0:	cd bf       	out	0x3d, r28	; 61
    3de2:	09 94       	ijmp

00003de4 <__epilogue_restores__>:
    3de4:	2a 88       	ldd	r2, Y+18	; 0x12
    3de6:	39 88       	ldd	r3, Y+17	; 0x11
    3de8:	48 88       	ldd	r4, Y+16	; 0x10
    3dea:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dec:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dee:	7d 84       	ldd	r7, Y+13	; 0x0d
    3df0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3df2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3df4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3df6:	b9 84       	ldd	r11, Y+9	; 0x09
    3df8:	c8 84       	ldd	r12, Y+8	; 0x08
    3dfa:	df 80       	ldd	r13, Y+7	; 0x07
    3dfc:	ee 80       	ldd	r14, Y+6	; 0x06
    3dfe:	fd 80       	ldd	r15, Y+5	; 0x05
    3e00:	0c 81       	ldd	r16, Y+4	; 0x04
    3e02:	1b 81       	ldd	r17, Y+3	; 0x03
    3e04:	aa 81       	ldd	r26, Y+2	; 0x02
    3e06:	b9 81       	ldd	r27, Y+1	; 0x01
    3e08:	ce 0f       	add	r28, r30
    3e0a:	d1 1d       	adc	r29, r1
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	ed 01       	movw	r28, r26
    3e18:	08 95       	ret

00003e1a <_exit>:
    3e1a:	f8 94       	cli

00003e1c <__stop_program>:
    3e1c:	ff cf       	rjmp	.-2      	; 0x3e1c <__stop_program>
